#!/bin/bash
#
# Copyright (C) 2022 Sarisan Sekoohaka
# Copyright (C) 2022 Sakuyou Sekoohaka
#
# Sankaku Channel downloader
# Dependencies: coreutils, curl, jq, sed, util-linux, wget
# Sankaku Channel has some limits, for example you cant download more than 2000 artworks with the same tags without premium account.

for CSCD_DEP in curl getopt jq mkdir sed wget
do
    if ! [[ -x /usr/bin/$CSCD_DEP ]]
    then
        if [[ $CSCD_DEP == getopt ]]
        then
            CSCD_MISSING="$CSCD_MISSING util-linux"
        elif [[ $CSCD_DEP == mkdir ]]
        then
            CSCD_MISSING="$CSCD_MISSING coreutils"
        else
            CSCD_MISSING="$CSCD_MISSING $CSCD_DEP"
        fi
    fi
done

if [[ -n $CSCD_MISSING ]]
then
    echo "Missing dependencies:$CSCD_MISSING"
    exit 1
fi

CSCD_VERSION="3.0-pre1"
CSCD_CONFIG="$HOME/.config/cscd"
CSCD_CACHE="$HOME/.cache/cscd"
CSCD_CPID_CACHE="$CSCD_CACHE/$$"

if ! mkdir -p ${CSCD_CONFIG}
then
    echo "Failed to create config directory '$CSCD_CONFIG'"
    exit 1
fi

if ! mkdir -p ${CSCD_CPID_CACHE}
then
    echo "Failed to create cache directory '$CSCD_CPID_CACHE'"
    exit 1
fi

CSCD_WGET_TIMEOUT=86400
CSCD_SLEEP_TIME=0

if [[ -n $1 ]]
then
    CSCD_OPTIONS=$(getopt --longoptions authorize,login:,password:,posts:,books:,help,skip,keep,tags:,number:,repair,wget-timeout:,encount,sleep: --name "$0" --options aL:P:p:b:hskt:n:rw:el: -- "$@")
    eval set -- "$CSCD_OPTIONS"

    while [[ -n $1 ]]
    do
        case $1 in
            -a|--authorize)
                CSCD_AUTH=0
                ;;
            -L|--login)
                CSCD_AUTH=0
                CSANKAKU_LOGIN="$2"
                shift
                ;;
            -P|--password)
                CSCD_AUTH=0
                CSANKAKU_PASSWORD="$2"
                shift
                ;;
            -p|--posts)
                CSCD_POSTS=0
                CSCD_DOWNLOAD_DIR="$2"
                shift
                ;;
            -b|--books)
                CSCD_BOOKS=0
                CSCD_DOWNLOAD_DIR="$2"
                shift
                ;;
            -h|--help)
                CSCD_HELP=0
                ;;
            -s|--skip)
                CSCD_SKIP_MD5=0
                ;;
            -k|--keep)
                CSCD_KEEP_MD5=0
                ;;
            -t|--tags)
                CSCD_TAGS="$2"
                shift
                ;;
            -n|--number)
                CSCD_NUMBER=$2
                shift
                ;;
            -r|--repair)
                CSCD_REPAIR=0
                ;;
            -w|--wget-timeout)
                CSCD_WGET_TIMEOUT=$2
                shift
                ;;
            -e|--encount)
                CSCD_ENCOUNT=0
                ;;
            -l|--sleep)
                CSCD_SLEEP_TIME=$2
                shift
                ;;
            --)
                break
                ;;
            *)
                echo "Try '$0 --help' for more information"
                exit 1
                ;;
        esac
        shift
    done
else
    echo "Try '$0 --help' for more information"
    exit 1
fi

if [[ -v $CSCD_HELP ]]
then
    echo -e "CSCD $CSCD_VERSION\nUsage: $0 [options]\n" \
            "  -a, --authorize\t\tGet authorization token with login and password\n" \
            "  -L, --login <arg>\t\tYour Sankaku Channel login\n" \
            "  -P, --password <arg>\t\tYour Sankaku Channel password\n" \
            "  -p, --posts <path>\t\tStart downloading posts to the selected download directory\n" \
            "  -b, --books <path>\t\tStart downloading books to the selected download directory\n" \
            "  -h, --help\t\t\tShow help information\n" \
            "  -s, --skip\t\t\tSkip md5 checksums\n" \
            "  -k, --keep\t\t\tKeep files failed md5 checksums\n" \
            "  -t, --tags <arg>\t\tSearch tags\n" \
            "  -n, --number <num>\t\tNumber of posts/books to download. 0 - unlimited\n" \
            "  -r, --repair\t\t\tRedownload broken files\n" \
            "  -w, --wget-timeout <secs>\tWget timeout and connect-timeout, default: 24 hours\n" \
            "  -e, --encount\t\tDownload new artworks only\n" \
            "  -l, --sleep <secs>\t\tTime interval between curl requests, may help with throttled and busy errors"
fi

if ([[ -v $CSCD_POSTS ]] || [[ -v $CSCD_BOOKS ]]) && [[ -f ${CSCD_CONFIG}/time ]]
then
    if [[ $(($(date -u +%s)-$(cat ${CSCD_CONFIG}/time))) -ge 72000 ]]
    then
        CSCD_AUTH=0
    fi
fi

if [[ -v $CSCD_AUTH ]]
then

    if [[ -z $CSANKAKU_LOGIN ]] && [[ -f ${CSCD_CONFIG}/login ]]
    then
        CSANKAKU_LOGIN="$(cat ${CSCD_CONFIG}/login)"
    fi

    while [[ -z $CSANKAKU_LOGIN ]]
    do
        read -e -p "Login: " CSANKAKU_LOGIN
    done

    if [[ -z $CSANKAKU_PASSWORD ]] && [[ -f ${CSCD_CONFIG}/password ]]
    then
        CSANKAKU_PASSWORD="$(cat ${CSCD_CONFIG}/password)"
    fi

    while [[ -z $CSANKAKU_PASSWORD ]]
    do
        read -e -p "Password: " CSANKAKU_PASSWORD
    done

    curl -s -A "CSCD" -X POST -H "Content-Type: application/json" -d "{\"login\":\"$CSANKAKU_LOGIN\",\"password\":\"$CSANKAKU_PASSWORD\"}" "https://capi-v2.sankakucomplex.com/auth/token" -o ${CSCD_CPID_CACHE}/login.json

    if [[ "$(jq -r 'map_values(tostring)|.success' ${CSCD_CPID_CACHE}/login.json)" == "true" ]]
    then
        jq -r '.access_token' ${CSCD_CPID_CACHE}/login.json > ${CSCD_CONFIG}/token
        echo $(date +%s) > ${CSCD_CONFIG}/time
        echo "$CSANKAKU_LOGIN" > ${CSCD_CONFIG}/login
        echo "$CSANKAKU_PASSWORD" > ${CSCD_CONFIG}/password
        echo -e "\nAuthorized successfully\n"
    else
        if [[ -f ${CSCD_CPID_CACHE}/login.json ]]
        then
            echo -e "\nError: $(jq -r '.error' ${CSCD_CPID_CACHE}/login.json)\n"
            exit 1
        else
            echo -e "\nError: failed to access https://capi-v2.sankakucomplex.com\n"
            exit 1
        fi
    fi
fi

if [[ -v $CSCD_POSTS ]] && [[ -f ${CSCD_CONFIG}/token ]]
then
    if ! [[ -d ${CSCD_DOWNLOAD_DIR} ]]
    then
        if ! mkdir -p ${CSCD_DOWNLOAD_DIR} &> /dev/null
        then
            echo "Failed to create directory '$CSCD_DOWNLOAD_DIR'"
            exit 1
        fi
    fi

    while [[ -z $CSCD_TAGS ]]
    do
        read -e -p "Enter tags: " CSCD_TAGS
    done

    while [[ -z $CSCD_NUMBER ]]
    do
        read -e -p "Enter number of artworks: " CSCD_NUMBER
    done

    if [[ $CSCD_NUMBER -eq 0 ]]
    then
        CSCD_NUMBER=-1
    fi

    CSCD_PAGE=1
    CSCD_SUCCESS=0
    CSCD_FAILED=0
    CSCD_DONE=0

    echo "Downloading artworks"
    echo "--------------------"
    echo -e -n "\rSuccess: $CSCD_SUCCESS Failed: $CSCD_FAILED Done: $CSCD_DONE"

    until [[ -v $CSCD_ABSOLUTE_BREAK ]]
    do
        curl -s -A "CSCD" -G -H "Authorization: Bearer $(cat ${CSCD_CONFIG}/token)" --data-urlencode "page=$CSCD_PAGE" --data-urlencode "tags=$CSCD_TAGS" "https://capi-v2.sankakucomplex.com/posts" -o ${CSCD_CPID_CACHE}/posts.json

        if [[ -f ${CSCD_CPID_CACHE}/posts.json ]]
        then
            if jq -r '.success' ${CSCD_CPID_CACHE}/posts.json &> /dev/null
            then
                echo -e "\nError: $(jq -r '.code' ${CSCD_CPID_CACHE}/posts.json)\n"
                exit 1
            fi
        else
            echo -e "\nError: failed to access https://capi-v2.sankakucomplex.com\n"
            exit 1
        fi

        if [[ "$(cat ${CSCD_CPID_CACHE}/posts.json)" == "[]" ]]
        then
            break
        fi

        jq -r '.[].file_url' ${CSCD_CPID_CACHE}/posts.json > ${CSCD_CPID_CACHE}/urls.json

        for CSCD_URL in $(cat ${CSCD_CPID_CACHE}/urls.json)
        do
            if [[ $CSCD_SUCCESS -eq $CSCD_NUMBER ]]
            then
                CSCD_ABSOLUTE_BREAK=0
                break
            fi

            CSCD_FILENAME="$(echo ${CSCD_URL} | cut -d '?' -f 1 | cut -d '/' -f 7)"

            if ! [[ -d ${CSCD_DOWNLOAD_DIR} ]]
            then
                echo -e "\nDownload dir does not exist\n"
                exit 1
            fi

            if [[ -v $CSCD_ENCOUNT ]] && [[ -f ${CSCD_DOWNLOAD_DIR}/${CSCD_FILENAME} ]]
            then
                CSCD_ABSOLUTE_BREAK=0
                break
            fi

            if ! [[ -f ${CSCD_DOWNLOAD_DIR}/${CSCD_FILENAME} ]] || ([[ -v $CSCD_REPAIR ]] && [[ -f ${CSCD_DOWNLOAD_DIR}/${CSCD_FILENAME} ]] && ! [[ "$(md5sum ${CSCD_DOWNLOAD_DIR}/${CSCD_FILENAME} | cut -d ' ' -f 1)" == "$(echo ${CSCD_FILENAME} | cut -d '.' -f 1)" ]])
            then
                wget --quiet --tries=0 --retry-connrefused --output-document=${CSCD_DOWNLOAD_DIR}/${CSCD_FILENAME} --timeout=$CSCD_WGET_TIMEOUT --connect-timeout=$CSCD_WGET_TIMEOUT --user-agent="CSCD" "$CSCD_URL" &> /dev/null
                if [[ -f ${CSCD_DOWNLOAD_DIR}/${CSCD_FILENAME} ]]
                then
                    if [[ -v $CSCD_SKIP_MD5 ]]
                    then
                        CSCD_SUCCESS=$((CSCD_SUCCESS+1))
                    else
                        if [[ "$(md5sum ${CSCD_DOWNLOAD_DIR}/${CSCD_FILENAME} | cut -d ' ' -f 1)" == "$(echo ${CSCD_FILENAME} | cut -d '.' -f 1)" ]]
                        then
                            CSCD_SUCCESS=$((CSCD_SUCCESS+1))
                        else
                            CSCD_FAILED=$((CSCD_FAILED+1))
                            echo ${CSCD_FILENAME} >> ${CSCD_DOWNLOAD_DIR}/md5_errors.txt
                            if ! [[ -v $CSCD_KEEP_MD5 ]]
                            then
                                rm -f ${CSCD_DOWNLOAD_DIR}/${CSCD_FILENAME}
                            fi
                        fi
                    fi
                else
                    CSCD_FAILED=$((CSCD_FAILED+1))
                    echo ${CSCD_FILENAME} >> ${CSCD_DOWNLOAD_DIR}/connection_errors.txt
                fi
            fi
            CSCD_DONE=$((CSCD_DONE+1))
            echo -e -n "\rSuccess: $CSCD_SUCCESS Failed: $CSCD_FAILED Done: $CSCD_DONE"
        done
        CSCD_PAGE=$((CSCD_PAGE+1))

        sleep $CSCD_SLEEP_TIME
    done
    echo -e "\n"
elif ! [[ -f ${CSCD_CONFIG}/token ]] && [[ -v $CSCD_POSTS ]]
then
    echo "You are not authorized"
    exit 1
fi

if [[ -v $CSCD_BOOKS ]] && [[ -f ${CSCD_CONFIG}/token ]]
then
    if ! [[ -d ${CSCD_DOWNLOAD_DIR} ]]
    then
        if ! mkdir -p ${CSCD_DOWNLOAD_DIR} &> /dev/null
        then
            echo "Failed to create directory '$CSCD_DOWNLOAD_DIR'"
            exit 1
        fi
    fi

    while [[ -z $CSCD_TAGS ]]
    do
        read -e -p "Enter tags: " CSCD_TAGS
    done

    while [[ -z $CSCD_NUMBER ]]
    do
        read -e -p "Enter number of books: " CSCD_NUMBER
    done

    if [[ $CSCD_NUMBER -eq 0 ]]
    then
        CSCD_NUMBER=-1
    fi

    CSCD_PAGE=1
    CSCD_DONE=0

    echo "Downloading books"
    echo "-----------------"

    until [[ $CSCD_DONE -eq $CSCD_NUMBER ]]
    do
        curl -s -A "CSCD" -G -H "Authorization: Bearer $(cat ${CSCD_CONFIG}/token)" --data-urlencode "page=$CSCD_PAGE" --data-urlencode "tags=$CSCD_TAGS" "https://capi-v2.sankakucomplex.com/pools" -o ${CSCD_CPID_CACHE}/books.json

        if [[ -f ${CSCD_CPID_CACHE}/books.json ]]
        then
            if jq -r '.success' ${CSCD_CPID_CACHE}/books.json &> /dev/null
            then
                echo -e "\nError: $(jq -r '.code' ${CSCD_CPID_CACHE}/books.json)\n"
                exit 1
            fi
        else
            echo -e "\nError: failed to access https://capi-v2.sankakucomplex.com\n"
            exit 1
        fi

        if [[ "$(cat ${CSCD_CPID_CACHE}/books.json)" == "[]" ]]
        then
            break
        fi

        jq -r '.[].id' ${CSCD_CPID_CACHE}/books.json > ${CSCD_CPID_CACHE}/pools.json

        for CSCD_POOL in $(cat ${CSCD_CPID_CACHE}/pools.json)
        do
            if [[ $CSCD_DONE -eq $CSCD_NUMBER ]]
            then
                break
            fi

            CSCD_DOWNLOAD_DIR_POOL="$CSCD_DOWNLOAD_DIR/$CSCD_POOL"

            if ! [[ -d ${CSCD_DOWNLOAD_DIR_POOL} ]] || [[ -v $CSCD_REPAIR ]]
            then
                if ! mkdir -p ${CSCD_DOWNLOAD_DIR_POOL}
                then
                    echo "Failed to create directory '$CSCD_DOWNLOAD_DIR_POOL'"
                    break
                fi

                CSCD_POOL_PAGE=1
                CSCD_POOL_SUCCESS=0
                CSCD_POOL_FAILED=0
                CSCD_POOL_DONE=0

                echo -e -n "\rSuccess: $CSCD_POOL_SUCCESS Failed: $CSCD_POOL_FAILED Done: $CSCD_POOL_DONE"
                until [[ -v $CSCD_ABSOLUTE_BREAK ]]
                do
                    curl -s -A "CSCD" -G -H "Authorization: Bearer $(cat ${CSCD_CONFIG}/token)" --data-urlencode "page=$CSCD_POOL_PAGE" --data-urlencode "tags=pool:$CSCD_POOL" "https://capi-v2.sankakucomplex.com/posts" -o ${CSCD_CPID_CACHE}/book_${CSCD_POOL}.json

                    if [[ -f ${CSCD_CPID_CACHE}/book_${CSCD_POOL}.json ]]
                    then
                        if jq -r '.success' ${CSCD_CPID_CACHE}/book_${CSCD_POOL}.json &> /dev/null
                        then
                            echo -e "\nError: $(jq -r '.code' ${CSCD_CPID_CACHE}/book_${CSCD_POOL}.json)\n"
                            exit 1
                        fi
                    else
                        echo -e "\nError: failed to access https://capi-v2.sankakucomplex.com\n"
                        exit 1
                    fi

                    if [[ "$(cat ${CSCD_CPID_CACHE}/book_${CSCD_POOL}.json)" == "[]" ]]
                    then
                        CSCD_DONE=$((CSCD_DONE+1))
                        break
                    fi

                    jq -r '.[].file_url' ${CSCD_CPID_CACHE}/book_${CSCD_POOL}.json > ${CSCD_CPID_CACHE}/urls_${CSCD_POOL}.json

                    for CSCD_URL in $(cat ${CSCD_CPID_CACHE}/urls_${CSCD_POOL}.json)
                    do
                        CSCD_FILENAME="$(echo ${CSCD_URL} | cut -d '?' -f 1 | cut -d '/' -f 7)"

                        if ! [[ -d ${CSCD_DOWNLOAD_DIR_POOL} ]]
                        then
                            echo -e "\nDownload dir does not exist\n"
                            exit 1
                        fi

                        if [[ -v $CSCD_ENCOUNT ]] && [[ -f ${CSCD_DOWNLOAD_DIR_POOL}/${CSCD_FILENAME} ]]
                        then
                            CSCD_ABSOLUTE_BREAK=0
                            break
                        fi

                        if ! [[ -f ${CSCD_DOWNLOAD_DIR_POOL}/${CSCD_FILENAME} ]] || ([[ -v $CSCD_REPAIR ]] && [[ -f ${CSCD_DOWNLOAD_DIR_POOL}/${CSCD_FILENAME} ]] && ! [[ "$(md5sum ${CSCD_DOWNLOAD_DIR_POOL}/${CSCD_FILENAME} | cut -d ' ' -f 1)" == "$(echo ${CSCD_FILENAME} | cut -d '.' -f 1)" ]])
                        then
                            wget --quiet --tries=0 --retry-connrefused --output-document=${CSCD_DOWNLOAD_DIR_POOL}/${CSCD_FILENAME} --timeout=$CSCD_WGET_TIMEOUT --connect-timeout=$CSCD_WGET_TIMEOUT --user-agent="CSCD" "$CSCD_URL" &> /dev/null
                            if [[ -f ${CSCD_DOWNLOAD_DIR_POOL}/${CSCD_FILENAME} ]]
                            then
                                if [[ -v ${CSCD_SKIP_MD5} ]]
                                then
                                    CSCD_POOL_SUCCESS=$((CSCD_POOL_SUCCESS+1))
                                else
                                    if [[ "$(md5sum ${CSCD_DOWNLOAD_DIR_POOL}/${CSCD_FILENAME} | cut -d ' ' -f 1)" == "$(echo ${CSCD_FILENAME} | cut -d '.' -f 1)" ]]
                                    then
                                        CSCD_POOL_SUCCESS=$((CSCD_POOL_SUCCESS+1))
                                    else
                                        CSCD_POOL_FAILED=$((CSCD_POOL_FAILED+1))
                                        echo ${CSCD_FILENAME} >> ${CSCD_DOWNLOAD_DIR_POOL}/md5_errors.txt
                                        if ! [[ -v $CSCD_KEEP_MD5 ]]
                                        then
                                            rm -f ${CSCD_DOWNLOAD_DIR_POOL}/${CSCD_FILENAME}
                                        fi
                                    fi
                                fi
                            else
                                CSCD_POOL_FAILED=$((CSCD_POOL_FAILED+1))
                                echo ${CSCD_FILENAME} >> ${CSCD_DOWNLOAD_DIR_POOL}/connection_errors.txt
                            fi
                        fi
                        CSCD_POOL_DONE=$((CSCD_POOL_DONE+1))
                        echo -e -n "\rSuccess: $CSCD_POOL_SUCCESS Failed: $CSCD_POOL_FAILED Done: $CSCD_POOL_DONE"
                    done
                    CSCD_POOL_PAGE=$((CSCD_POOL_PAGE+1))

                    sleep $CSCD_SLEEP_TIME
                done
            fi
        done
        CSCD_PAGE=$((CSCD_PAGE+1))

        sleep $CSCD_SLEEP_TIME
    done
    echo -e "\n"
elif ! [[ -f ${CSCD_CONFIG}/token ]] && [[ -v $CSCD_BOOKS ]]
then
    echo "You are not authorized"
    exit 1
fi
