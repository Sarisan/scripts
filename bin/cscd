#!/bin/bash
#
# Copyright (C) 2022 Sarisan Sekoohaka
# Copyright (C) 2022 Sakuyou Sekoohaka
#
# Sankaku Channel downloader
# Dependencies: coreutils, curl, jq, sed, util-linux, wget
# There are some limits on Sankaku Channel, for example, you cannot download more than 10000 artworks with the same tags without premium account.

for CSCD_DEP in curl getopt jq mkdir sed wget
do
    if ! type $CSCD_DEP &> /dev/null
    then
        if [[ $CSCD_DEP == getopt ]]
        then
            CSCD_MISSING="$CSCD_MISSING util-linux"
        elif [[ $CSCD_DEP == mkdir ]]
        then
            CSCD_MISSING="$CSCD_MISSING coreutils"
        else
            CSCD_MISSING="$CSCD_MISSING $CSCD_DEP"
        fi
    fi
done

if [[ -n $CSCD_MISSING ]]
then
    echo "Missing dependencies:$CSCD_MISSING"
    exit 1
fi

CSCD_VERSION="3.8"
CSCD_CONFIG="$HOME/.config/cscd"
CSCD_CACHE="$HOME/.cache/cscd"
CSCD_CPID_CACHE="$CSCD_CACHE/$$"

if ! mkdir -p "$CSCD_CONFIG" &> /dev/null
then
    echo "Failed to create config directory '$CSCD_CONFIG'"
    exit 1
fi

if ! mkdir -p "$CSCD_CPID_CACHE" &> /dev/null
then
    echo "Failed to create cache directory '$CSCD_CPID_CACHE'"
    exit 1
fi

CSCD_RANGE=20
CSCD_WGET_TIMEOUT=86400
CSCD_SLEEP_TIME=0

if [[ -n $1 ]]
then
    CSCD_OPTIONS=$(getopt --longoptions authorize,range:,posts:,books:,exclude:,help,skip,keep,tags:,number:,repair,full-repair,wget-timeout:,encount,sleep:,reversive,exclude-download,exclude-remove,exclude-selfremove --name "$0" --options ag:p:b:x:hskt:n:rfw:el:iomv -- "$@")
    eval set -- "$CSCD_OPTIONS"

    while [[ -n $1 ]]
    do
        case $1 in
            -a|--authorize)
                CSCD_AUTH=0
                ;;
            -g|--range)
                CSCD_RANGE=$2
                shift
                ;;
            -p|--posts)
                CSCD_POSTS=0
                CSCD_DOWNLOAD_DIR="$2"
                shift
                ;;
            -b|--books)
                CSCD_BOOKS=0
                CSCD_DOWNLOAD_DIR="$2"
                shift
                ;;
            -x|--exclude)
                CSCD_EXCLUDE_LOOP="$2"
                shift
                ;;
            -h|--help)
                CSCD_HELP=0
                ;;
            -s|--skip)
                CSCD_SKIP_MD5=0
                ;;
            -k|--keep)
                CSCD_KEEP_MD5=0
                ;;
            -t|--tags)
                CSCD_TAGS="$2"
                shift
                ;;
            -n|--number)
                CSCD_NUMBER=$2
                shift
                ;;
            -r|--repair)
                CSCD_REPAIR=0
                ;;
            -f|--full-repair)
                CSCD_FULL_REPAIR=0
                ;;
            -w|--wget-timeout)
                CSCD_WGET_TIMEOUT=$2
                shift
                ;;
            -e|--encount)
                CSCD_ENCOUNT=0
                ;;
            -l|--sleep)
                CSCD_SLEEP_TIME=$2
                shift
                ;;
            -i|--reversive)
                CSCD_REVERSIVE=0
                ;;
            -o|--exclude-download)
                CSCD_XDOWNLOAD=0
                ;;
            -m|--exclude-remove)
                CSCD_XREMOVE=0
                ;;
            -v|--exclude-selfremove)
                CSCD_XSELFREMOVE=0
                ;;
            --)
                break
                ;;
            *)
                echo "Try '$0 --help' for more information"
                exit 1
                ;;
        esac
        shift
    done
else
    echo "Try '$0 --help' for more information"
    exit 1
fi

if [[ -v $CSCD_HELP ]]
then
    echo -e "CSCD $CSCD_VERSION\nUsage: $0 [options]\n" \
            "  -a, --authorize\t\tGet authorization token with login and password\n" \
            "  -g, --range <num>\t\tSet range of artworks between curl requests, max: 100, default: 20\n" \
            "  -p, --posts <path>\t\tStart downloading posts to the selected download directory\n" \
            "  -b, --books <path>\t\tStart downloading books to the selected download directory\n" \
            "  -x, --exclude <path>\t\tExclude artworks from specified directories\n" \
            "  -h, --help\t\t\tShow help information\n" \
            "  -s, --skip\t\t\tSkip md5 checksums\n" \
            "  -k, --keep\t\t\tKeep files failed md5 checksums\n" \
            "  -t, --tags <arg>\t\tDownload posts/books by tags\n" \
            "  -n, --number <num>\t\tLimit number of artworks to download\n" \
            "  -r, --repair\t\t\tRedownload failed files only (md5_errors.txt connection_errors.txt)\n" \
            "  -f, --full-repair\t\tScan entire directory for broken files and download\n" \
            "  -w, --wget-timeout <secs>\tSet wget timeout and connect-timeout, default: 24 hours\n" \
            "  -e, --encount\t\tDownload new artworks only\n" \
            "  -l, --sleep <secs>\t\tSet time interval between curl requests, may help with throttled and busy errors\n" \
            "  -i, --reversive\t\tRemove artworks from excluded directories\n" \
            "  -o, --exclude-download\tDownload failed files from excluded directories\n" \
            "  -m, --exclude-remove\t\tDownload and remove failed files from excluded directories\n" \
            "  -v, --exclude-selfremove\tRemove files that are in excluded directories\n" \
            "\n" \
            "\tR - Removed files\n" \
            "\tS - Successfully downloaded\n" \
            "\tF - Connection errors and md5 checksums fails\n" \
            "\tD - Done in total"
fi

if ([[ -v $CSCD_POSTS ]] || [[ -v $CSCD_BOOKS ]]) && [[ -f "$CSCD_CONFIG/time" ]] && ! [[ -v $CSCD_AUTH ]]
then
    if [[ $(($(date -u +%s)-$(cat "$CSCD_CONFIG/time"))) -ge 36000 ]]
    then
        CSCD_AUTH=1
    fi
fi

if [[ -v $CSCD_AUTH ]]
then
    if [[ -z $CSANKAKU_LOGIN ]] && [[ -f "$CSCD_CONFIG/login" ]] && [[ $CSCD_AUTH -eq 1 ]]
    then
        CSANKAKU_LOGIN="$(cat "$CSCD_CONFIG/login")"
    fi

    while [[ -z $CSANKAKU_LOGIN ]]
    do
        read -e -p "Login: " CSANKAKU_LOGIN
    done

    if [[ -z $CSANKAKU_PASSWORD ]] && [[ -f "$CSCD_CONFIG/password" ]] && [[ $CSCD_AUTH -eq 1 ]]
    then
        CSANKAKU_PASSWORD="$(cat "$CSCD_CONFIG/password")"
    fi

    while [[ -z $CSANKAKU_PASSWORD ]]
    do
        read -e -p "Password: " -s CSANKAKU_PASSWORD
    done

    curl -d "{\"login\":\"$CSANKAKU_LOGIN\",\"password\":\"$CSANKAKU_PASSWORD\"}" -H "Content-Type: application/json" -o "$CSCD_CPID_CACHE/login.json" -X POST -s -A "CSCD" "https://capi-v2.sankakucomplex.com/auth/token"

    if [[ "$(jq -r 'map_values(tostring)|.success' "$CSCD_CPID_CACHE/login.json")" == "true" ]]
    then
        jq -r '.access_token' "$CSCD_CPID_CACHE/login.json" > "$CSCD_CONFIG/token"
        echo $(date +%s) > "$CSCD_CONFIG/time"
        echo $CSANKAKU_LOGIN > "$CSCD_CONFIG/login"
        echo $CSANKAKU_PASSWORD > "$CSCD_CONFIG/password"
        echo -e "\nAuthorized successfully\n"
    else
        if [[ -f "$CSCD_CPID_CACHE/login.json" ]]
        then
            echo -e "\nError: $(jq -r '.error' "$CSCD_CPID_CACHE/login.json")\n"
            exit 1
        else
            echo -e "\nError: failed to access https://capi-v2.sankakucomplex.com/\n"
            exit 1
        fi
    fi
fi

if [[ -v $CSCD_POSTS ]] && [[ -f "$CSCD_CONFIG/token" ]]
then
    if ! [[ -d "$CSCD_DOWNLOAD_DIR" ]]
    then
        if ! mkdir -p "$CSCD_DOWNLOAD_DIR" &> /dev/null
        then
            echo "Failed to create directory '$CSCD_DOWNLOAD_DIR'"
            exit 1
        fi
    fi

    CSCD_PAGE=1
    CSCD_REMOVED=0
    CSCD_SUCCESS=0
    CSCD_FAILED=0
    CSCD_DONE=0

    if [[ -z $CSCD_NUMBER ]]
    then
        CSCD_NUMBER=-1
    else
        if [[ $CSCD_NUMBER -lt $CSCD_RANGE ]]
        then
            CSCD_RANGE=$CSCD_NUMBER
        fi
    fi

    if ([[ -v $CSCD_REPAIR ]] || [[ -v $CSCD_FULL_REPAIR ]]) && [[ -f "$CSCD_DOWNLOAD_DIR/md5_errors.txt" ]]
    then
        mv "$CSCD_DOWNLOAD_DIR/md5_errors.txt" "$CSCD_CPID_CACHE/md5_errors.txt"
    fi

    if ([[ -v $CSCD_REPAIR ]] || [[ -v $CSCD_FULL_REPAIR ]]) && [[ -f "$CSCD_DOWNLOAD_DIR/connection_errors.txt" ]]
    then
        mv "$CSCD_DOWNLOAD_DIR/connection_errors.txt" "$CSCD_CPID_CACHE/connection_errors.txt"
    fi

    echo "Downloading artworks"
    echo "--------------------"
    echo -e -n "\rR: $CSCD_REMOVED S: $CSCD_SUCCESS F: $CSCD_FAILED D: $CSCD_DONE"

    until [[ -v $CSCD_ABSOLUTE_BREAK ]]
    do
        curl --data-urlencode "limit=$CSCD_RANGE" --data-urlencode "page=$CSCD_PAGE" --data-urlencode "tags=$CSCD_TAGS" -G -H "Authorization: Bearer $(cat "$CSCD_CONFIG/token")" -o "$CSCD_CPID_CACHE/posts.json" -s -A "CSCD" "https://capi-v2.sankakucomplex.com/posts"

        if [[ -f "$CSCD_CPID_CACHE/posts.json" ]]
        then
            if jq -r '.success' "$CSCD_CPID_CACHE/posts.json" &> /dev/null
            then
                echo -e "\nError: $(jq -r '.code' "$CSCD_CPID_CACHE/posts.json")\n"
                exit 1
            fi
        else
            echo -e "\nError: failed to access https://capi-v2.sankakucomplex.com/\n"
            exit 1
        fi

        if [[ "$(cat "$CSCD_CPID_CACHE/posts.json")" == "[]" ]]
        then
            break
        fi

        jq -r '.[].file_url' "$CSCD_CPID_CACHE/posts.json" > "$CSCD_CPID_CACHE/urls"

        for CSCD_URL in $(cat "$CSCD_CPID_CACHE/urls")
        do
            if [[ $CSCD_SUCCESS -eq $CSCD_NUMBER ]]
            then
                CSCD_ABSOLUTE_BREAK=0
                break
            fi

            CSCD_FILENAME="$(echo $CSCD_URL | cut -d '?' -f 1 | cut -d '/' -f 7)"

            if ! [[ -d "$CSCD_DOWNLOAD_DIR" ]]
            then
                echo -e "\nDownload dir does not exist\n"
                exit 1
            fi

            if [[ -v $CSCD_ENCOUNT ]] && [[ -f "$CSCD_DOWNLOAD_DIR/$CSCD_FILENAME" ]]
            then
                CSCD_ABSOLUTE_BREAK=0
                break
            fi

            CSCD_CONTINUE=1

            if [[ -f "$CSCD_DOWNLOAD_DIR/$CSCD_FILENAME" ]]
            then
                if [[ -v $CSCD_REPAIR ]]
                then
                    CSCD_CONTINUE=0

                    if [[ -f "$CSCD_CPID_CACHE/md5_errors.txt" ]]
                    then
                        if grep --quiet "$CSCD_FILENAME" "$CSCD_CPID_CACHE/md5_errors.txt"
                        then
                            CSCD_CONTINUE=1
                        fi
                    fi

                    if [[ -f "$CSCD_CPID_CACHE/connection_errors.txt" ]]
                    then
                        if grep --quiet "$CSCD_FILENAME" "$CSCD_CPID_CACHE/connection_errors.txt"
                        then
                            CSCD_CONTINUE=1
                        fi
                    fi
                elif [[ -v $CSCD_FULL_REPAIR ]]
                then
                    if [[ "$(md5sum "$CSCD_DOWNLOAD_DIR/$CSCD_FILENAME" | cut -d ' ' -f 1)" == "$(echo $CSCD_FILENAME | cut -d '.' -f 1)" ]]
                    then
                        CSCD_CONTINUE=0
                    fi
                else
                    CSCD_CONTINUE=0
                fi
            fi

            if [[ -n $CSCD_EXCLUDE_LOOP ]]
            then
                for CSCD_EXCLUDE_DIR in $CSCD_EXCLUDE_LOOP
                do
                    if [[ -f "$CSCD_EXCLUDE_DIR/$CSCD_FILENAME" ]]
                    then
                        if [[ -v $CSCD_REVERSIVE ]]
                        then
                            rm -f "$CSCD_EXCLUDE_DIR/$CSCD_FILENAME"

                            if [[ -f "$CSCD_EXCLUDE_DIR/md5_errors.txt" ]]
                            then
                                sed -e "s/$CSCD_FILENAME//" -e '/^$/d' -i "$CSCD_EXCLUDE_DIR/md5_errors.txt"
                            fi

                            if [[ -f "$CSCD_EXCLUDE_DIR/connection_errors.txt" ]]
                            then
                                sed -e "s/$CSCD_FILENAME//" -e '/^$/d' -i "$CSCD_EXCLUDE_DIR/connection_errors.txt"
                            fi

                            CSCD_REMOVED=$((CSCD_REMOVED+1))
                        elif [[ -v $CSCD_XDOWNLOAD ]] || [[ -v $CSCD_XREMOVE ]]
                        then
                            CSCD_CONTINUE=0

                            if [[ -f "$CSCD_EXCLUDE_DIR/md5_errors.txt" ]]
                            then
                                if grep --quiet "$CSCD_FILENAME" "$CSCD_EXCLUDE_DIR/md5_errors.txt"
                                then
                                    CSCD_CONTINUE=1

                                    if [[ -v $CSCD_XREMOVE ]]
                                    then
                                        rm -f "$CSCD_EXCLUDE_DIR/$CSCD_FILENAME"
                                        sed -e "s/$CSCD_FILENAME//" -e '/^$/d' -i "$CSCD_EXCLUDE_DIR/md5_errors.txt"
                                        CSCD_REMOVED=$((CSCD_REMOVED+1))
                                    fi
                                fi
                            fi

                            if [[ -f "$CSCD_EXCLUDE_DIR/connection_errors.txt" ]]
                            then
                                if grep --quiet "$CSCD_FILENAME" "$CSCD_EXCLUDE_DIR/connection_errors.txt"
                                then
                                    CSCD_CONTINUE=1

                                    if [[ -v $CSCD_XREMOVE ]]
                                    then
                                        rm -f "$CSCD_EXCLUDE_DIR/$CSCD_FILENAME"
                                        sed -e "s/$CSCD_FILENAME//" -e '/^$/d' -i "$CSCD_EXCLUDE_DIR/connection_errors.txt"
                                        CSCD_REMOVED=$((CSCD_REMOVED+1))
                                    fi
                                fi
                            fi
                        elif [[ -v $CSCD_XSELFREMOVE ]]
                        then
                            CSCD_CONTINUE=0

                            if [[ -f "$GBCD_DOWNLOAD_DIR/$GBCD_FILENAME" ]]
                            then
                                rm -f "$GBCD_DOWNLOAD_DIR/$GBCD_FILENAME"

                                if [[ -f "$GBCD_DOWNLOAD_DIR/md5_errors.txt" ]]
                                then
                                    sed -e "s/$GBCD_FILENAME//" -e '/^$/d' -i "$GBCD_DOWNLOAD_DIR/md5_errors.txt"
                                fi

                                if [[ -f "$GBCD_DOWNLOAD_DIR/connection_errors.txt" ]]
                                then
                                    sed -e "s/$GBCD_FILENAME//" -e '/^$/d' -i "$GBCD_DOWNLOAD_DIR/connection_errors.txt"
                                fi

                                GBCD_REMOVED=$((GBCD_REMOVED+1))
                            fi
                        else
                            CSCD_CONTINUE=0
                            break
                        fi
                    fi
                done
            fi

            if [[ $CSCD_CONTINUE -eq 1 ]]
            then
                wget --quiet --tries=0 --retry-connrefused --output-document="$CSCD_DOWNLOAD_DIR/$CSCD_FILENAME" --timeout=$CSCD_WGET_TIMEOUT --connect-timeout=$CSCD_WGET_TIMEOUT --user-agent="CSCD" "$CSCD_URL"
                if [[ -f "$CSCD_DOWNLOAD_DIR/$CSCD_FILENAME" ]]
                then
                    if [[ -v $CSCD_SKIP_MD5 ]]
                    then
                        CSCD_SUCCESS=$((CSCD_SUCCESS+1))
                    else
                        if [[ "$(md5sum "$CSCD_DOWNLOAD_DIR/$CSCD_FILENAME" | cut -d ' ' -f 1)" == "$(echo $CSCD_FILENAME | cut -d '.' -f 1)" ]]
                        then
                            CSCD_SUCCESS=$((CSCD_SUCCESS+1))
                        else
                            CSCD_FAILED=$((CSCD_FAILED+1))
                            echo $CSCD_FILENAME >> "$CSCD_DOWNLOAD_DIR/md5_errors.txt"

                            if ! [[ -v $CSCD_KEEP_MD5 ]]
                            then
                                rm -f "$CSCD_DOWNLOAD_DIR/$CSCD_FILENAME"
                                CSCD_REMOVED=$((CSCD_REMOVED+1))
                            fi
                        fi
                    fi
                else
                    CSCD_FAILED=$((CSCD_FAILED+1))
                    echo $CSCD_FILENAME >> "$CSCD_DOWNLOAD_DIR/connection_errors.txt"
                fi
            fi
            CSCD_DONE=$((CSCD_DONE+1))
            echo -e -n "\rR: $CSCD_REMOVED S: $CSCD_SUCCESS F: $CSCD_FAILED D: $CSCD_DONE"
        done
        CSCD_PAGE=$((CSCD_PAGE+1))

        sleep $CSCD_SLEEP_TIME
    done
    echo -e "\n"
elif ! [[ -f "$CSCD_CONFIG/token" ]] && [[ -v $CSCD_POSTS ]]
then
    echo "You are not authorized"
    exit 1
fi

if [[ -v $CSCD_BOOKS ]] && [[ -f "$CSCD_CONFIG/token" ]]
then
    if ! [[ -d "$CSCD_DOWNLOAD_DIR" ]]
    then
        if ! mkdir -p "$CSCD_DOWNLOAD_DIR" &> /dev/null
        then
            echo "Failed to create directory '$CSCD_DOWNLOAD_DIR'"
            exit 1
        fi
    fi

    CSCD_PAGE=1
    CSCD_POOLS_RANGE=$CSCD_RANGE
    CSCD_DONE=0

    if [[ -z $CSCD_NUMBER ]]
    then
        CSCD_NUMBER=-1
    else
        if [[ $CSCD_NUMBER -lt $CSCD_POOLS_RANGE ]]
        then
            CSCD_POOLS_RANGE=$CSCD_NUMBER
        fi
    fi

    echo "Downloading books"
    echo "-----------------"

    until [[ $CSCD_DONE -eq $CSCD_NUMBER ]]
    do
        curl --data-urlencode "limit=$CSCD_POOLS_RANGE" --data-urlencode "page=$CSCD_PAGE" --data-urlencode "tags=$CSCD_TAGS" -G -H "Authorization: Bearer $(cat "$CSCD_CONFIG/token")" -o "$CSCD_CPID_CACHE/books.json" -s -A "CSCD" "https://capi-v2.sankakucomplex.com/pools"

        if [[ -f "$CSCD_CPID_CACHE/books.json" ]]
        then
            if jq -r '.success' "$CSCD_CPID_CACHE/books.json" &> /dev/null
            then
                echo -e "\nError: $(jq -r '.code' "$CSCD_CPID_CACHE/books.json")\n"
                exit 1
            fi
        else
            echo -e "\nError: failed to access https://capi-v2.sankakucomplex.com/\n"
            exit 1
        fi

        if [[ "$(cat "$CSCD_CPID_CACHE/books.json")" == "[]" ]]
        then
            break
        fi

        jq -r '.[].id' "$CSCD_CPID_CACHE/books.json" > "$CSCD_CPID_CACHE/pools.json"

        for CSCD_POOL in $(cat "$CSCD_CPID_CACHE/pools.json")
        do
            if [[ $CSCD_DONE -eq $CSCD_NUMBER ]]
            then
                break
            fi

            CSCD_DOWNLOAD_DIR_POOL="$CSCD_DOWNLOAD_DIR/$CSCD_POOL"

            if ! [[ -d "$CSCD_DOWNLOAD_DIR_POOL" ]] || [[ -v $CSCD_REPAIR ]]
            then
                if ! mkdir -p "$CSCD_DOWNLOAD_DIR_POOL"
                then
                    echo "Failed to create directory '$CSCD_DOWNLOAD_DIR_POOL'"
                    break
                fi

                CSCD_POOL_PAGE=1
                CSCD_POOL_REMOVED=0
                CSCD_POOL_SUCCESS=0
                CSCD_POOL_FAILED=0
                CSCD_POOL_DONE=0

                if ([[ -v $CSCD_REPAIR ]] || [[ -v $CSCD_FULL_REPAIR ]]) && [[ -f "$CSCD_DOWNLOAD_DIR_POOL/md5_errors.txt" ]]
                then
                    mv "$CSCD_DOWNLOAD_DIR_POOL/md5_errors.txt" "$CSCD_CPID_CACHE/md5_errors_$CSCD_POOL.txt"
                fi

                if ([[ -v $CSCD_REPAIR ]] || [[ -v $CSCD_FULL_REPAIR ]]) && [[ -f "$CSCD_DOWNLOAD_DIR_POOL/connection_errors.txt" ]]
                then
                    mv "$CSCD_DOWNLOAD_DIR_POOL/connection_errors.txt" "$CSCD_CPID_CACHE/connection_errors_$CSCD_POOL.txt"
                fi

                echo -e -n "\rR: $CSCD_POOL_REMOVED S: $CSCD_POOL_SUCCESS F: $CSCD_POOL_FAILED D: $CSCD_POOL_DONE"
                until [[ -v $CSCD_ABSOLUTE_BREAK ]]
                do
                    curl --data-urlencode "limit=$CSCD_RANGE" --data-urlencode "page=$CSCD_POOL_PAGE" --data-urlencode "tags=pool:$CSCD_POOL" -G -H "Authorization: Bearer $(cat "$CSCD_CONFIG/token")" -o "$CSCD_CPID_CACHE/book_$CSCD_POOL.json" -s -A "CSCD" "https://capi-v2.sankakucomplex.com/posts"

                    if [[ -f "$CSCD_CPID_CACHE/book_$CSCD_POOL.json" ]]
                    then
                        if jq -r '.success' "$CSCD_CPID_CACHE/book_$CSCD_POOL.json" &> /dev/null
                        then
                            echo -e "\nError: $(jq -r '.code' "$CSCD_CPID_CACHE/book_$CSCD_POOL.json")\n"
                            exit 1
                        fi
                    else
                        echo -e "\nError: failed to access https://capi-v2.sankakucomplex.com/\n"
                        exit 1
                    fi

                    if [[ "$(cat "$CSCD_CPID_CACHE/book_$CSCD_POOL.json")" == "[]" ]]
                    then
                        CSCD_DONE=$((CSCD_DONE+1))
                        break
                    fi

                    jq -r '.[].file_url' "$CSCD_CPID_CACHE/book_$CSCD_POOL.json" > "$CSCD_CPID_CACHE/urls_$CSCD_POOL"

                    for CSCD_URL in $(cat "$CSCD_CPID_CACHE/urls_$CSCD_POOL")
                    do
                        CSCD_FILENAME="$(echo $CSCD_URL | cut -d '?' -f 1 | cut -d '/' -f 7)"

                        if ! [[ -d "$CSCD_DOWNLOAD_DIR_POOL" ]]
                        then
                            echo -e "\nDownload dir does not exist\n"
                            exit 1
                        fi

                        if [[ -v $CSCD_ENCOUNT ]] && [[ -f "$CSCD_DOWNLOAD_DIR_POOL/$CSCD_FILENAME" ]]
                        then
                            CSCD_ABSOLUTE_BREAK=0
                            break
                        fi

                        CSCD_CONTINUE=1

                        if [[ -f "$CSCD_DOWNLOAD_DIR_POOL/$CSCD_FILENAME" ]]
                        then
                            if [[ -v $CSCD_REPAIR ]]
                            then
                                if [[ -f "$CSCD_CPID_CACHE/md5_errors_$CSCD_POOL.txt" ]]
                                then
                                    if ! grep --quiet "$CSCD_FILENAME" "$CSCD_CPID_CACHE/md5_errors_$CSCD_POOL.txt"
                                    then
                                        CSCD_CONTINUE=0
                                    fi
                                fi

                                if [[ -f "$CSCD_CPID_CACHE/connection_errors_$CSCD_POOL.txt" ]]
                                then
                                    if ! grep --quiet "$CSCD_FILENAME" "$CSCD_CPID_CACHE/connection_errors_$CSCD_POOL.txt"
                                    then
                                        CSCD_CONTINUE=0
                                    fi
                                fi
                            elif [[ -v $CSCD_FULL_REPAIR ]]
                            then
                                if [[ "$(md5sum "$CSCD_DOWNLOAD_DIR_POOL/$CSCD_FILENAME" | cut -d ' ' -f 1)" == "$(echo $CSCD_FILENAME | cut -d '.' -f 1)" ]]
                                then
                                    CSCD_CONTINUE=0
                                fi
                            else
                                CSCD_CONTINUE=0
                            fi
                        fi

                        if [[ $CSCD_CONTINUE -eq 1 ]]
                        then
                            wget --quiet --tries=0 --retry-connrefused --output-document="$CSCD_DOWNLOAD_DIR_POOL/$CSCD_FILENAME" --timeout=$CSCD_WGET_TIMEOUT --connect-timeout=$CSCD_WGET_TIMEOUT --user-agent="CSCD" "$CSCD_URL"
                            if [[ -f "$CSCD_DOWNLOAD_DIR_POOL/$CSCD_FILENAME" ]]
                            then
                                if [[ -v $CSCD_SKIP_MD5 ]]
                                then
                                    CSCD_POOL_SUCCESS=$((CSCD_POOL_SUCCESS+1))
                                else
                                    if [[ "$(md5sum "$CSCD_DOWNLOAD_DIR_POOL/$CSCD_FILENAME" | cut -d ' ' -f 1)" == "$(echo $CSCD_FILENAME | cut -d '.' -f 1)" ]]
                                    then
                                        CSCD_POOL_SUCCESS=$((CSCD_POOL_SUCCESS+1))
                                    else
                                        CSCD_POOL_FAILED=$((CSCD_POOL_FAILED+1))
                                        echo $CSCD_FILENAME >> "$CSCD_DOWNLOAD_DIR_POOL/md5_errors.txt"

                                        if ! [[ -v $CSCD_KEEP_MD5 ]]
                                        then
                                            rm -f "$CSCD_DOWNLOAD_DIR_POOL/$CSCD_FILENAME"
                                            CSCD_POOL_REMOVED=$((CSCD_POOL_REMOVED+1))
                                        fi
                                    fi
                                fi
                            else
                                CSCD_POOL_FAILED=$((CSCD_POOL_FAILED+1))
                                echo $CSCD_FILENAME >> "$CSCD_DOWNLOAD_DIR_POOL/connection_errors.txt"
                            fi
                        fi
                        CSCD_POOL_DONE=$((CSCD_POOL_DONE+1))
                        echo -e -n "\rR: $CSCD_POOL_REMOVED S: $CSCD_POOL_SUCCESS F: $CSCD_POOL_FAILED D: $CSCD_POOL_DONE"
                    done
                    CSCD_POOL_PAGE=$((CSCD_POOL_PAGE+1))

                    sleep $CSCD_SLEEP_TIME
                done
            fi
        done
        CSCD_PAGE=$((CSCD_PAGE+1))

        sleep $CSCD_SLEEP_TIME
    done
    echo -e "\n"
elif ! [[ -f "$CSCD_CONFIG/token" ]] && [[ -v $CSCD_BOOKS ]]
then
    echo "You are not authorized"
    exit 1
fi
