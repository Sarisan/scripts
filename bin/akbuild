#!/bin/bash
AKBUILD_VERSION="2.12"

# Default configuration values
DEF_CONFIGFILE=$HOME/.akbuild_config

# Build
DEF_AKBUILD_JOBS="$(nproc --all)"                                  # How many jobs use to build
DEF_AKBUILD_USERNAME="$USER"
DEF_AKBUILD_HOSTNAME="$HOSTNAME"
DEF_AKBUILD_ARCH="arm64"
DEF_AKBUILD_CC="clang"
DEF_AKBUILD_OPTINONS="LD=ld.lld AR=llvm-ar NM=llvm-nm OBJCOPY=llvm-objcopy OBJDUMP=llvm-objdump STRIP=llvm-strip CROSS_COMPILE=aarch64-linux-gnu- CROSS_COMPILE_ARM32=arm-linux-gnueabi-"
DEF_AKBUILD_DEFCONFIG="vendor/ginkgo-perf_defconfig"
DEF_AKBUILD_OUTPUTFILE="Image.gz-dtb"
DEF_AKBUILD_DTBO=true
DEF_AKBUILD_CCACHE=false
DEF_AKBUILD_CCACHE_DIR=""                                          # Custom path to ccache dir

# Kernel
DEF_AKBUILD_KERNELURL="https://github.com/ArrowOS-Devices/android_kernel_xiaomi_ginkgo.git"
DEF_AKBUILD_KERNELBRANCH="arrow-11.0"
DEF_AKBUILD_KERNELNAME="QuicksilveRV2"
DEF_AKBUILD_KDEPTH1=true                                           # Clone kernel with --depth=1 or no

# Clang
DEF_AKBUILD_PREINSTALLED_CLANG=false
DEF_AKBUILD_CLANGURL="https://github.com/kdrag0n/proton-clang.git"
DEF_AKBUILD_CLANGBRANCH="master"
DEF_AKBUILD_CLANG=""                                               # Custom path to clang, will used clang from AKBUILD_PATH if not setted. Example: AKBUILD_CLANG="/home/sarisan/proton-clang"
DEF_AKBUILD_CLANGBIN="bin"                                         # You can set custom path to binaries, it's needed when you use AOSP clang or something like this. Example: AKBUILD_CLANGBIN="clang-r353983c1/bin"

# Device
DEF_AKBUILD_ANYKERNEL=true
DEF_AKBUILD_ANYKERNELURL="https://github.com/ghostrider-reborn/AnyKernel3"
DEF_AKBUILD_ANYKERNELBRANCH="master"
DEF_AKBUILD_DEVICENAME="ginkgo"

# Colors
DFC="\033[0m"         # Default font
BDFC="\033[1m"        # Bold default font
GDFC="\033[0;32m"     # Green default font
RDFC="\033[0;31m"     # Red default font

# Default config
AKBUILD_CONFIG="# Android kernel build configuration\nAKBUILD_PATH=\"$PWD\"\nAKBUILD_JOBS=\"$DEF_AKBUILD_JOBS\"\nAKBUILD_USERNAME=\"$DEF_AKBUILD_USERNAME\"\nAKBUILD_HOSTNAME=\"$DEF_AKBUILD_HOSTNAME\"\nAKBUILD_ARCH=\"$DEF_AKBUILD_ARCH\"\nAKBUILD_CC=\"$DEF_AKBUILD_CC\"\nAKBUILD_OPTINONS=\"$DEF_AKBUILD_OPTINONS\"\nAKBUILD_DEFCONFIG=\"$DEF_AKBUILD_DEFCONFIG\"\nAKBUILD_OUTPUTFILE=\"$DEF_AKBUILD_OUTPUTFILE\"\nAKBUILD_DTBO=$DEF_AKBUILD_DTBO\nAKBUILD_CCACHE=$DEF_AKBUILD_CCACHE\nAKBUILD_CCACHE_DIR=\"$DEF_AKBUILD_CCACHE_DIR\"\n\n# Kernel\nAKBUILD_KERNELURL=\"$DEF_AKBUILD_KERNELURL\"\nAKBUILD_KERNELBRANCH=\"$DEF_AKBUILD_KERNELBRANCH\"\nAKBUILD_KERNELNAME=\"$DEF_AKBUILD_KERNELNAME\"\nAKBUILD_KDEPTH1=$DEF_AKBUILD_KDEPTH1\n\n# Clang\nAKBUILD_PREINSTALLED_CLANG=$DEF_AKBUILD_PREINSTALLED_CLANG\nAKBUILD_CLANGURL=\"$DEF_AKBUILD_CLANGURL\"\nAKBUILD_CLANGBRANCH=\"$DEF_AKBUILD_CLANGBRANCH\"\nAKBUILD_CLANG=\"$DEF_AKBUILD_CLANG\"\nAKBUILD_CLANGBIN=\"$DEF_AKBUILD_CLANGBIN\"\n\n# Device\nAKBUILD_ANYKERNEL=$DEF_AKBUILD_ANYKERNEL\nAKBUILD_ANYKERNELURL=\"$DEF_AKBUILD_ANYKERNELURL\"\nAKBUILD_ANYKERNELBRANCH=\"$DEF_AKBUILD_ANYKERNELBRANCH\"\nAKBUILD_DEVICENAME=\"$DEF_AKBUILD_DEVICENAME\""


AKCONFIGFILE=$DEF_CONFIGFILE
CACHE=$HOME/.cache
CACHECONFIGFILE=$CACHE/akbuild

if [ -f $CACHECONFIGFILE ]; then
. $CACHECONFIGFILE
else
if [ -f $AKCONFIGFILE ]; then
. $AKCONFIGFILE
else
echo -e "$AKBUILD_CONFIG" > $AKCONFIGFILE
. $AKCONFIGFILE
fi
fi
export KBUILD_BUILD_USER=$AKBUILD_USERNAME
export KBUILD_BUILD_HOST=$AKBUILD_HOSTNAME
if [ $AKBUILD_DTBO = true ]; then
AKDTBO="dtbo.img"
AKDTBOS="Enabled"
else
AKDTBO=""
AKDTBOS="Disabled"
fi
if [ $AKBUILD_CCACHE = true ]; then
AKCC="ccache $AKBUILD_CC"
AKCCS="Enabled"
if [ $AKBUILD_CCACHE_DIR ]; then
export CCACHE_DIR="$AKBUILD_CCACHE_DIR"
else
export CCACHE_DIR="$AKBUILD_PATH/ccache"
mkdir -p $CCACHE_DIR
echo "max_size = 10G" > $CCACHE_DIR/ccache.conf
fi
else
AKCC="$AKBUILD_CC"
AKCCS="Disabled"
fi
if [ $AKBUILD_KDEPTH1 = true ]; then
AKDEPTH="--depth=1"
else
AKDEPTH=""
fi
if [ $AKBUILD_PREINSTALLED_CLANG = true ]; then
AKCLANG="$AKBUILD_PATH"
AKCS="Preinstalled"
else
if [ $AKBUILD_CLANG ]; then
AKCLANG="$AKBUILD_CLANG"
else
AKCLANG="$AKBUILD_PATH/clang"
fi
export PATH="$AKCLANG/$AKBUILD_CLANGBIN:$PATH"
AKCS="$AKCLANG/$AKBUILD_CLANGBIN"
fi
if [ $AKBUILD_ANYKERNEL = true ]; then
AKANYKERNEL="Enabled"
else
AKANYKERNEL="Disabled"
fi
AKKERNELS="$AKDEPTH $AKBUILD_KERNELURL -b $AKBUILD_KERNELBRANCH $AKBUILD_PATH/kernel"
AKCLANGS="--depth=1 $AKBUILD_CLANGURL -b $AKBUILD_CLANGBRANCH $AKCLANG"

if [ "$1" = "version" ] || [ "$1" = "help" ] || [ "$1" = "config" ] || [ "$1" = "clone" ] || [ "$1" = "pull" ] || [ "$1" = "build" ] || [ "$1" = "clean" ]; then

if [ "$1" = "version" ]; then
echo -e "akbuild version $AKBUILD_VERSION"
fi

if [ "$1" = "help" ]; then
echo -e "\tversion\t\tShow akbuild version\n\thelp\t\tShow info about using$BDFC akbuild$DFC\n\tconfig\t\tActions with connfiguration files\n\tclone\t\tClone kernel and clang\n\tpull\t\tUpdate kernel and clang by using$BDFC git pull$DFC if possible\n\tbuild\t\tStart building kernel\n\tclean\t\tRemove out folder\n\n\takbuild config\n\t\tShow currently loaded configuration\n\n\takbuild config [-c <filename>] [-d] [-r] [-r <filename>]\n\n\t\t-c <filename>, --custom <filename>\n\t\t\tLoad configuration from file\n\n\t\t-d, --default\n\t\t\tLoad configuration from default file\n\n\t\t-r, --regenerate\n\t\t\tRegenerate default configuration file\n\n\t\t-r <filename>, --regenerate <filename>\n\t\t\tRegenerate configuration to file\n\n\takbuild clone/pull\n\t\tClone/Pull kernel and clang\n\n\takbuild clone/pull kernel\n\t\tClone/Pull kernel only\n\n\takbuild clone/pull clang\n\t\tClone/Pull clang only"
fi

if [ "$1" = "config" ] && [ "$2" = "" ] || [ "$2" = "-c" ] || [ "$2" = "--custom" ] || [ "$2" = "-d" ] || [ "$2" = "--default" ] || [ "$2" = "-r" ] || [ "$2" = "--regenerate" ]; then
if [ "$1" = "config" ] && [ "$2" = "" ]; then
echo -e "Work path: $AKBUILD_PATH\nJobs: $AKBUILD_JOBS\nBuilder: $KBUILD_BUILD_USER@$KBUILD_BUILD_HOST\nKernel image: $AKBUILD_OUTPUTFILE\nBuild dtbo.img: $AKDTBOS\nCcache: $AKCCS\nKernel: $AKBUILD_KERNELNAME\nClang binaries: $AKCS\nAnyKernel: $AKANYKERNEL\nDevice: $AKBUILD_DEVICENAME"
fi
if [ "$1" = "config" ] && [ "$2" = "-c" ] || [ "$2" = "--custom" ] && [ "$3" ]; then
if [ -f $3 ]; then
. $3
echo -e "Configuration loaded from $3"
else
echo -e "Configuration file deosn't exist, regenerate it"
fi
else
if [ "$1" = "config" ] && [ "$2" = "-c" ] || [ "$2" = "--custom" ]; then
echo -e "You must specify the file"
fi
fi
if [ "$1" = "config" ] && [ "$2" = "-d" ] || [ "$2" = "--default" ]; then
if [ -f $AKCONFIGFILE ]; then
. $AKCONFIGFILE
echo -e "Configuration loaded from $AKCONFIGFILE"
else
echo -e "Configuration file deosn't exist, regenerate it"
fi
fi
if [ "$1" = "config" ] && [ "$2" = "-r" ] || [ "$2" = "--regenerate" ] && [ "$3" ]; then
echo -e "$AKBUILD_CONFIG" > $3
echo -e "Configuration file was regenerated in $3"
else
if [ "$1" = "config" ] && [ "$2" = "-r" ] || [ "$2" = "--regenerate" ]; then
echo -e "$AKBUILD_CONFIG" > $AKCONFIGFILE
echo -e "Default configuration file was regenerated"
fi
fi
else
if [ "$1" = "config" ] && [ "$2" ]; then
echo -e "Invalid argument '$2'"
fi
fi

if [ "$1" = "clone" ] && [ "$2" = "" ] || [ "$2" = "kernel" ] || [ "$2" = "clang" ]; then
if [ "$1" = "clone" ] && [ "$2" = "" ]; then
if [ -d $AKBUILD_PATH/kernel ]; then
echo -e "The kernel has already been cloned"
else
if ! git clone $AKKERNELS; then
echo -e "Error cloning the kernel"
fi
fi
if [ -d $AKCLANG ]; then
if [ $AKBUILD_CLANG ]; then
echo -e "You are using clang from external path"
else
echo -e "The clang has already been cloned"
fi
else
if ! git clone $AKCLANGS; then
echo -e "Error cloning the clang"
fi
fi
fi
if [ "$1" = "clone" ] && [ "$2" = kernel ]; then
if [ -d $AKBUILD_PATH/kernel ]; then
echo -e "The kernel has already been cloned"
else
if ! git clone $AKKERNELS; then
echo -e "Error cloning the kernel"
fi
fi
fi
if [ "$1" = "clone" ] && [ "$2" = clang ]; then
if [ -d $AKCLANG ]; then
if [ $AKBUILD_CLANG ]; then
echo -e "You are using clang from external path"
else
echo -e "The clang has already been cloned"
fi
else
if ! git clone $AKCLANGS; then
echo -e "Error cloning the clang"
fi
fi
fi
else
if [ "$1" = "clone" ] && [ "$2" ]; then
echo -e "Invalid argument '$2'"
fi
fi

if [ "$1" = "pull" ] && [ "$2" = "" ] || [ "$2" = "kernel" ] || [ "$2" = "clang" ]; then
if [ "$1" = "pull" ] && [ "$2" = "" ]; then
if [ -d $AKBUILD_PATH/kernel ]; then
cd $AKBUILD_PATH/kernel
if ! git pull; then
echo -e "Error pulling the kernel"
fi
else
echo -e "The kernel is not cloned"
fi
if [ -d $AKCLANG ]; then
cd $AKCLANG
if ! git pull; then
echo -e "Error pulling the clang"
fi
else
echo -e "The clang is not cloned"
fi
fi
if [ "$1" = "pull" ] && [ "$2" = "kernel" ]; then
if [ -d $AKBUILD_PATH/kernel ]; then
cd $AKBUILD_PATH/kernel
if ! git pull; then
echo -e "Error pulling the kernel"
fi
else
echo -e "The kernel is not cloned"
fi
fi
if [ "$1" = "pull" ] && [ "$2" = "clang" ]; then
if [ -d $AKCLANG ]; then
cd $AKCLANG
if ! git pull; then
echo -e "Error pulling the clang"
fi
else
echo -e "The clang is not cloned"
fi
fi
else
if [ "$1" = "pull" ] && [ "$2" ]; then
echo -e "Invalid argument '$2'"
fi
fi

if [ "$1" = "build" ]; then
if [ -d $AKBUILD_PATH/kernel ]; then
if [ -d $AKCLANG ]; then
if
SECONDS=0
cd $AKBUILD_PATH/kernel
make O=$AKBUILD_PATH/out ARCH=$AKBUILD_ARCH $AKBUILD_DEFCONFIG
make -j$AKBUILD_JOBS O=$AKBUILD_PATH/out ARCH=$AKBUILD_ARCH CC="$AKCC" $AKBUILD_OPTINONS $AKBUILD_OUTPUTFILE $AKDTBO
then
AKMINUTES=$((SECONDS / 60)) && AKSECONDS=$((SECONDS % 60)) && if(($AKMINUTES<=9)); then AKMINUTES=0$AKMINUTES; fi && if(($AKSECONDS<=9)); then AKSECONDS=0$AKSECONDS; fi && AKTIME=$AKMINUTES:$AKSECONDS
cd $AKBUILD_PATH
if [ $AKBUILD_ANYKERNEL = true ]; then
if [ -f "out/arch/$AKBUILD_ARCH/boot/$AKBUILD_OUTPUTFILE" ]; then
ZIPNAME="$AKBUILD_KERNELNAME-$AKBUILD_DEVICENAME-$(date '+%Y%m%d').zip"
if ! git clone -q $AKBUILD_ANYKERNELURL -b $AKBUILD_ANYKERNELBRANCH AnyKernel3; then
echo -e "$RDFC\nBuild failed! Unable to clone AnyKernel3 | $AKTIME$DFC"
else
cp out/arch/$AKBUILD_ARCH/boot/$AKBUILD_OUTPUTFILE AnyKernel3
if [ $AKBUILD_DTBO = true ]; then
cp out/arch/$AKBUILD_ARCH/boot/dtbo.img AnyKernel3
fi
cd AnyKernel3
if ! zip -r9 "../$ZIPNAME" * -x '*.git*' README.md *placeholder; then
echo -e "$RDFC\nBuild failed! zip is not installed or something else is wrong | $AKTIME$DFC"
else
cd ..
rm -rf AnyKernel3
echo -e "$GDFC\nBuild completed successfully | $AKTIME$DFC\nOutput package: $ZIPNAME"
fi
fi
else
echo -e "$RDFC\nBuild failed! Output file not found | $AKTIME$DFC"
fi
else
echo -e "$GDFC\nBuild completed successfully | $AKTIME$DFC"
fi
else
AKMINUTES=$((SECONDS / 60)) && AKSECONDS=$((SECONDS % 60)) && if(($AKMINUTES<=9)); then AKMINUTES=0$AKMINUTES; fi && if(($AKSECONDS<=9)); then AKSECONDS=0$AKSECONDS; fi && AKTIME=$AKMINUTES:$AKSECONDS
cd $AKBUILD_PATH
echo -e "$RDFC\nBuild failed! Something went wrong | $AKTIME$DFC"
fi
else
echo -e "The clang is not cloned"
fi
else
echo -e "The kernel is not cloned"
fi
fi

if [ "$1" = "clean" ]; then
echo -e "Removing out folder..."
rm -rf $AKBUILD_PATH/out
echo -e "\nOut folder removed"
fi

else
if [ "$1" ]; then
echo -e "Invalid argument '$1'"
fi
fi

mkdir -p $CACHE
echo -e "# Android kernel build configuration\nAKBUILD_PATH=\"$AKBUILD_PATH\"\nAKBUILD_JOBS=\"$AKBUILD_JOBS\"\nAKBUILD_USERNAME=\"$AKBUILD_USERNAME\"\nAKBUILD_HOSTNAME=\"$AKBUILD_HOSTNAME\"\nAKBUILD_ARCH=\"$AKBUILD_ARCH\"\nAKBUILD_CC=\"$AKBUILD_CC\"\nAKBUILD_OPTINONS=\"$AKBUILD_OPTINONS\"\nAKBUILD_DEFCONFIG=\"$AKBUILD_DEFCONFIG\"\nAKBUILD_OUTPUTFILE=\"$AKBUILD_OUTPUTFILE\"\nAKBUILD_DTBO=$AKBUILD_DTBO\nAKBUILD_CCACHE=$AKBUILD_CCACHE\nAKBUILD_CCACHE_DIR=\"$AKBUILD_CCACHE_DIR\"\n\n# Kernel\nAKBUILD_KERNELURL=\"$AKBUILD_KERNELURL\"\nAKBUILD_KERNELBRANCH=\"$AKBUILD_KERNELBRANCH\"\nAKBUILD_KERNELNAME=\"$AKBUILD_KERNELNAME\"\nAKBUILD_KDEPTH1=$AKBUILD_KDEPTH1\n\n# Clang\nAKBUILD_PREINSTALLED_CLANG=$AKBUILD_PREINSTALLED_CLANG\nAKBUILD_CLANGURL=\"$AKBUILD_CLANGURL\"\nAKBUILD_CLANGBRANCH=\"$AKBUILD_CLANGBRANCH\"\nAKBUILD_CLANG=\"$AKBUILD_CLANG\"\nAKBUILD_CLANGBIN=\"$AKBUILD_CLANGBIN\"\n\n# Device\nAKBUILD_ANYKERNEL=$AKBUILD_ANYKERNEL\nAKBUILD_ANYKERNELURL=\"$AKBUILD_ANYKERNELURL\"\nAKBUILD_ANYKERNELBRANCH=\"$AKBUILD_ANYKERNELBRANCH\"\nAKBUILD_DEVICENAME=\"$AKBUILD_DEVICENAME\"" > $CACHECONFIGFILE
