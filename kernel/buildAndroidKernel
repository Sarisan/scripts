#!/bin/bash
# Write '. buildAndroidKernel' in terminal to run

# Default configuration values
DEF_CONFIGFILE=$HOME/.akbuild_config

# Build
DEF_THREADS="all"
DEF_KUSER="$USER"
DEF_KHOST="$HOSTNAME"
DEF_ARCH="arm64"
DEF_DEFCONFIG="vendor/ginkgo-perf_defconfig"
DEF_LLVMF="CC=clang LD=ld.lld AR=llvm-ar AS=llvm-as NM=llvm-nm OBJCOPY=llvm-objcopy OBJDUMP=llvm-objdump STRIP=llvm-strip CROSS_COMPILE=aarch64-linux-gnu- CROSS_COMPILE_ARM32=arm-linux-gnueabi-"
DEF_OUTPUTFILE="Image.gz-dtb"

# Kernel
DEF_KERNELURL="https://github.com/ghostrider-reborn/android_kernel_xiaomi_ginkgo.git"
DEF_KERNELBRANCH="quartz"
DEF_KERNELNAME="QuicksilveR"
DEF_KDEPTH1=true

# Clang
DEF_CLANGURL="https://github.com/kdrag0n/proton-clang.git"
DEF_CLANGBRANCH="master"

# Device
DEF_ANYKERNELURL="https://github.com/ghostrider-reborn/AnyKernel3"
DEF_ANYKERNELBRANCH="master"
DEF_DEVICENAME="ginkgo"

# Colors
DFC="\033[0m"
BDFC="\033[1m"

skloadconf(){
if [ -f $CONFIGFILE ]; then
. $CONFIGFILE
export QSH=$BUILDPATH
if [ $THREADS = All ] || [ $THREADS = ALl ] || [ $THREADS = ALL ] || [ $THREADS = AlL ] || [ $THREADS = all ] || [ $THREADS = aLl ] || [ $THREADS = aLL ] || [ $THREADS = alL ]; then
THREADS1="$(nproc --all)"
else
THREADS1=$THREADS
fi
export KBUILD_BUILD_USER=$KUSER
export KBUILD_BUILD_HOST=$KHOST
if [ $KDEPTH1 = true ]; then
DEPTH="--depth=1"
else
DEPTH=""
fi
export PATH="$QSH/clang/bin:$PATH"
CONFSTRING="$CONFIGFILE\n\n$QSH will used to building\nKernel: $KERNELNAME\nDevice: $DEVICENAME\nBuilder: $KBUILD_BUILD_USER@$KBUILD_BUILD_HOST\nThreads: $THREADS1"
if [ $HASCONF = 1 ]; then
echo -e "Configuration loaded from $CONFSTRING"
if [ $SUSAGE = 1 ]; then
echo -e "\n$USAGE"
SUSAGE=0
fi
fi
else
echo -e "Configuration file doesn't exist, use$BDFC kbuild config --regenerate$DFC to regenerate it"
fi
}
kregen(){
rm -rf $CONFIGFILE
echo -e "# Android kernel build configuration\nBUILDPATH=$PWD\nTHREADS=\"$DEF_THREADS\"                    # How many threads use to build, all = all, 1 = 1\nKUSER=\"$DEF_KUSER\"\nKHOST=\"$DEF_KHOST\"\nARCH=\"$DEF_ARCH\"\nDEFCONFIG=\"$DEF_DEFCONFIG\"\nLLVMF=\"$DEF_LLVMF\"\nOUTPUTFILE=\"$DEF_OUTPUTFILE\"\n\n# Kernel\nKERNELURL=\"$DEF_KERNELURL\"\nKERNELBRANCH=\"$DEF_KERNELBRANCH\"\nKERNELNAME=\"$DEF_KERNELNAME\"\nKDEPTH1=$DEF_KDEPTH1                     # Clone kernel with --depth=1 or no\n\n# Clang\nCLANGURL=\"$DEF_CLANGURL\"\nCLANGBRANCH=\"$DEF_CLANGBRANCH\"\n\n# Device\nANYKERNELURL=\"$DEF_ANYKERNELURL\"\nANYKERNELBRANCH=\"$DEF_ANYKERNELBRANCH\"\nDEVICENAME=\"$DEF_DEVICENAME\"" > $CONFIGFILE
if [ $HASCONF = 1 ]; then
echo -e "Configuration file regenerated, use$BDFC kbuild config --custom <filename>$DFC to load it"
HASCONF=1
fi
}

USAGE="Use$BDFC kbuild --help$DFC to know more"
KBHELP="\tbuild             Start building kernel\n\tclone             Clone kernel and clang\n\tconfig            Actions with connfiguration files"
KCHELP="\tkbuild config [--help] [-c <filename>] [-d] [-r] [-r <filename>]\n\n\t\t-c <filename>, --custom <filename>\n\t\t\tLoad configuration from file\n\n\t\t-d, --default\n\t\t\tLoad configuration from default file\n\n\t\t-r, --regenerate\n\t\t\tRegenerate current configuration file\n\n\t\t-r <filename>, --regenerate <filename>\n\t\t\tRegenerate configuration to file"

CONFIGFILE=$DEF_CONFIGFILE
HASCONF=1
SUSAGE=1
if [ -f $CONFIGFILE ]; then
skloadconf
else
HASCONF=0
kregen
skloadconf
echo -e "Configuration written to $CONFSTRING\n\n$USAGE"
HASCONF=1
fi

kbuild(){
if [ "$1" = "build" ] || [ "$1" = "--help" ] || [ "$1" = "clone" ] || [ "$1" = "config" ]; then
if [ "$1" = "build" ]; then
if [ -d $QSH/kernel ]; then
if [ -d $QSH/clang ]; then
if
SECONDS=0
cd $QSH/kernel
make O=../out ARCH=$ARCH $DEFCONFIG
make -j$THREADS1 O=../out ARCH=$ARCH $LLVMF $OUTPUTFILE
then
cd $QSH
if [ -f "out/arch/$ARCH/boot/$OUTPUTFILE" ]; then
git clone -q $ANYKERNELURL -b $ANYKERNELBRANCH AnyKernel3
cp out/arch/$ARCH/boot/$OUTPUTFILE AnyKernel3
cd AnyKernel3
zip -r9 "../$KERNELNAME-$DEVICENAME-$(date '+%Y%m%d-%H%M')" * -x '*.git*' README.md *placeholder
cd ..
rm -rf AnyKernel3
echo -e "\nCompleted in $((SECONDS / 60)) minute(s) and $((SECONDS % 60)) second(s) !"
else
echo -e "\nBuild failed! Output file not found"
fi
else
cd $QSH
echo -e "\nBuild failed! Something went wrong"
fi
else
echo "There is no proton-clang"
if ! git clone --depth=1 $CLANGURL -b $CLANGBRANCH $QSH/clang; then
echo "Cloning failed! Aborting..."
else
kbuild build
fi
fi
else
echo "There is no kernel"
if ! git clone $DEPTH $KERNELURL -b $KERNELBRANCH $QSH/kernel; then
echo "Cloning failed! Aborting..."
else
kbuild build
fi
fi
fi
if [ "$1" = "--help" ]; then
echo -e "$KBHELP\n\n$KCHELP"
fi
if [ "$1" = "clone" ]; then
if [ -d $QSH/kernel ]; then
echo "Kernel already cloned"
else
if ! git clone $DEPTH $KERNELURL -b $KERNELBRANCH $QSH/kernel; then
echo "Cloning failed! Aborting..."
fi
fi
if [ -d $QSH/clang ]; then
echo "Clang already cloned"
else
if ! git clone --depth=1 $CLANGURL -b $CLANGBRANCH $QSH/clang; then
echo "Cloning failed! Aborting..."
fi
fi
fi
if [ "$1" = "config" ] && [ "$2" = "-c" ] || [ "$2" = "--custom" ] && [ "$3" ] || [ "$2" = "-d" ] || [ "$2" = "--default" ] || [ "$2" = "-r" ] || [ "$2" = "--regenerate" ]; then
if [ "$2" = "-c" ] || [ "$2" = "--custom" ] && [ "$3" ]; then
CONFIGFILE="$3"
skloadconf
fi
if [ "$2" = "-d" ] || [ "$2" = "--default" ]; then
CONFIGFILE=$DEF_CONFIGFILE
skloadconf
fi
if [ "$2" = "-r" ] || [ "$2" = "--regenerate" ]; then
if [ "$3" ]; then
CONFIGFILE="$3"
fi
kregen
fi
else
if [ "$1" = "config" ]; then
echo -e "$KCHELP"
fi
fi
else
echo -e "$KBHELP"
fi
}
