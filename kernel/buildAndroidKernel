#!/bin/bash
# Write '. buildAndroidKernel' in terminal to run

# Default configuration values
DEF_CONFIGFILE=$HOME/.akbuild_config

# Build
DEF_AKBUILD_THREADS="all"                                          # How many threads use to build, all = all, 1 = 1
DEF_AKBUILD_USERNAME="$USER"
DEF_AKBUILD_HOSTNAME="$HOSTNAME"
DEF_AKBUILD_ARCH="arm64"
DEF_AKBUILD_DEFCONFIG="vendor/ginkgo-perf_defconfig"
DEF_AKBUILD_OPTINONS="CC=clang LD=ld.lld AR=llvm-ar AS=llvm-as NM=llvm-nm OBJCOPY=llvm-objcopy OBJDUMP=llvm-objdump STRIP=llvm-strip CROSS_COMPILE=aarch64-linux-gnu- CROSS_COMPILE_ARM32=arm-linux-gnueabi-"
DEF_AKBUILD_OUTPUTFILE="Image.gz-dtb"
DEF_AKBUILD_DTBO="true"

# Kernel
DEF_AKBUILD_KERNELURL="https://github.com/ghostrider-reborn/android_kernel_xiaomi_ginkgo.git"
DEF_AKBUILD_KERNELBRANCH="quartz"
DEF_AKBUILD_KERNELNAME="QuicksilveR"
DEF_AKBUILD_KDEPTH1=true                                           # Clone kernel with --depth=1 or no

# Clang
DEF_AKBUILD_CLANGURL="https://github.com/kdrag0n/proton-clang.git"
DEF_AKBUILD_CLANGBRANCH="master"
DEF_AKBUILD_CLANG=""                                               # Custom path to clang, will used clang from AKBUILD_PATH if not setted. Example: AKBUILD_CLANG="/home/sarisan/proton-clang"
DEF_AKBUILD_CLANGBIN="bin"                                        # You can set custom path to binaries, it's needed when you use AOSP clang or something like this. Example: AKBUILD_CLANGBIN="clang-r353983c1/bin"

# Device
DEF_AKBUILD_ANYKERNEL=true
DEF_AKBUILD_ANYKERNELURL="https://github.com/ghostrider-reborn/AnyKernel3"
DEF_AKBUILD_ANYKERNELBRANCH="master"
DEF_AKBUILD_DEVICENAME="ginkgo"

# Colors
DFC="\033[0m"         # Standart font
BDFC="\033[1m"        # Bold standart font

skloadconf(){
if [ -f $CONFIGFILE ]; then
. $CONFIGFILE
export QSH=$AKBUILD_PATH
if [ $AKBUILD_THREADS = All ] || [ $AKBUILD_THREADS = ALl ] || [ $AKBUILD_THREADS = ALL ] || [ $AKBUILD_THREADS = AlL ] || [ $AKBUILD_THREADS = all ] || [ $AKBUILD_THREADS = aLl ] || [ $AKBUILD_THREADS = aLL ] || [ $AKBUILD_THREADS = alL ]; then
THREADS1="$(nproc --all)"
else
THREADS1=$AKBUILD_THREADS
fi
export KBUILD_BUILD_USER=$AKBUILD_USERNAME
export KBUILD_BUILD_HOST=$AKBUILD_HOSTNAME
if [ $AKBUILD_KDEPTH1 = true ]; then
AKDEPTH="--depth=1"
else
AKDEPTH=""
fi
if [ $AKBUILD_DTBO = true ]; then
AKDTBO="dtbo.img"
else
AKDTBO=""
fi
if [ $AKBUILD_CLANG ]; then
AKCLANG=$AKBUILD_CLANG
else
AKCLANG="$QSH/clang"
fi
export PATH="$AKCLANG/$AKBUILD_CLANGBIN:$PATH"
if [ $CACONF = 0 ]; then
ICONFIGFILE=$CONFIGFILE
fi
if [ $AKBUILD_ANYKERNEL = true ]; then
AKANYKERNEL="AnyKernel: Enabled"
else
AKANYKERNEL="AnyKernel: Disabled"
fi
CONFSTRING="$ICONFIGFILE\n\n$QSH will used to building\nKernel: $AKBUILD_KERNELNAME\n$AKANYKERNEL\nDevice: $AKBUILD_DEVICENAME\nBuilder: $KBUILD_BUILD_USER@$KBUILD_BUILD_HOST\nThreads: $THREADS1"
if [ $HASCONF = 1 ]; then
echo -e "Configuration loaded from $CONFSTRING"
if [ $SUSAGE = 1 ]; then
echo -e "\n$USAGE"
SUSAGE=0
fi
fi
mkdir -p $CACHE
echo -e "# Android kernel build configuration\nAKBUILD_PATH=\"$AKBUILD_PATH\"\nAKBUILD_THREADS=\"$AKBUILD_THREADS\"\nAKBUILD_USERNAME=\"$AKBUILD_USERNAME\"\nAKBUILD_HOSTNAME=\"$AKBUILD_HOSTNAME\"\nAKBUILD_ARCH=\"$AKBUILD_ARCH\"\nAKBUILD_DEFCONFIG=\"$AKBUILD_DEFCONFIG\"\nAKBUILD_OPTINONS=\"$AKBUILD_OPTINONS\"\nAKBUILD_OUTPUTFILE=\"$AKBUILD_OUTPUTFILE\"\nAKBUILD_DTBO=$AKBUILD_DTBO\n\n# Kernel\nAKBUILD_KERNELURL=\"$AKBUILD_KERNELURL\"\nAKBUILD_KERNELBRANCH=\"$AKBUILD_KERNELBRANCH\"\nAKBUILD_KERNELNAME=\"$AKBUILD_KERNELNAME\"\nAKBUILD_KDEPTH1=$AKBUILD_KDEPTH1\n\n# Clang\nAKBUILD_CLANGURL=\"$AKBUILD_CLANGURL\"\nAKBUILD_CLANGBRANCH=\"$AKBUILD_CLANGBRANCH\"\nAKBUILD_CLANG=\"$AKBUILD_CLANG\"\nAKBUILD_CLANGBIN=\"$AKBUILD_CLANGBIN\"\n\n# Device\nAKBUILD_ANYKERNEL=$AKBUILD_ANYKERNEL\nAKBUILD_ANYKERNELURL=\"$AKBUILD_ANYKERNELURL\"\nAKBUILD_ANYKERNELBRANCH=\"$AKBUILD_ANYKERNELBRANCH\"\nAKBUILD_DEVICENAME=\"$AKBUILD_DEVICENAME\"" > $CACHECONFIGFILE
else
echo -e "Configuration file doesn't exist, use$BDFC akbuild config --regenerate$DFC to regenerate it"
fi
}
kregen(){
echo -e "# Android kernel build configuration\nAKBUILD_PATH=\"$PWD\"\nAKBUILD_THREADS=\"$DEF_AKBUILD_THREADS\"\nAKBUILD_USERNAME=\"$DEF_AKBUILD_USERNAME\"\nAKBUILD_HOSTNAME=\"$DEF_AKBUILD_HOSTNAME\"\nAKBUILD_ARCH=\"$DEF_AKBUILD_ARCH\"\nAKBUILD_DEFCONFIG=\"$DEF_AKBUILD_DEFCONFIG\"\nAKBUILD_OPTINONS=\"$DEF_AKBUILD_OPTINONS\"\nAKBUILD_OUTPUTFILE=\"$DEF_AKBUILD_OUTPUTFILE\"\nAKBUILD_DTBO=$DEF_AKBUILD_DTBO\n\n# Kernel\nAKBUILD_KERNELURL=\"$DEF_AKBUILD_KERNELURL\"\nAKBUILD_KERNELBRANCH=\"$DEF_AKBUILD_KERNELBRANCH\"\nAKBUILD_KERNELNAME=\"$DEF_AKBUILD_KERNELNAME\"\nAKBUILD_KDEPTH1=$DEF_AKBUILD_KDEPTH1\n\n# Clang\nAKBUILD_CLANGURL=\"$DEF_AKBUILD_CLANGURL\"\nAKBUILD_CLANGBRANCH=\"$DEF_AKBUILD_CLANGBRANCH\"\nAKBUILD_CLANG=\"$DEF_AKBUILD_CLANG\"\nAKBUILD_CLANGBIN=\"$DEF_AKBUILD_CLANGBIN\"\n\n# Device\nAKBUILD_ANYKERNEL=$DEF_AKBUILD_ANYKERNEL\nAKBUILD_ANYKERNELURL=\"$DEF_AKBUILD_ANYKERNELURL\"\nAKBUILD_ANYKERNELBRANCH=\"$DEF_AKBUILD_ANYKERNELBRANCH\"\nAKBUILD_DEVICENAME=\"$DEF_AKBUILD_DEVICENAME\"" > $CONFIGFILE
if [ $HASCONF = 1 ]; then
echo -e "Configuration file regenerated, use$BDFC akbuild config --custom <filename>$DFC to load it"
fi
}

USAGE="Use$BDFC akbuild help$DFC to know more"
KBHELP="\thelp              Show info about using$BDFC akbuild$DFC\n\tbuild             Start building kernel\n\tclone             Clone kernel and clang\n\tconfig            Actions with connfiguration files\n\tclean             Remove out folder"
KCHELP="\takbuild config [-c <filename>] [-d] [-r] [-r <filename>]\n\n\t\t-c <filename>, --custom <filename>\n\t\t\tLoad configuration from file\n\n\t\t-d, --default\n\t\t\tLoad configuration from default file\n\n\t\t-r, --regenerate\n\t\t\tRegenerate current configuration file\n\n\t\t-r <filename>, --regenerate <filename>\n\t\t\tRegenerate configuration to file"

CONFIGFILE=$DEF_CONFIGFILE
CACHE=$HOME/.cache
CACHECONFIGFILE=$CACHE/akbuild
ICONFIGFILE="last session"
HASCONF=1
CACONF=1
SUSAGE=1
if [ -f $CACHECONFIGFILE ]; then
CONFIGFILE=$CACHECONFIGFILE
skloadconf
CACONF=0
else
CACONF=0
if [ -f $CONFIGFILE ]; then
skloadconf
else
HASCONF=0
kregen
skloadconf
echo -e "Configuration written to $CONFSTRING\n\n$USAGE"
HASCONF=1
fi
fi

akbuild(){
if [ "$1" = "build" ] || [ "$1" = "help" ] || [ "$1" = "clone" ] || [ "$1" = "config" ] || [ "$1" = "clean" ]; then
if [ "$1" = "build" ]; then
if [ -d $QSH/kernel ]; then
if [ -d $AKCLANG ]; then
if
SECONDS=0
cd $QSH/kernel
make O=../out ARCH=$AKBUILD_ARCH $AKBUILD_DEFCONFIG
make -j$THREADS1 O=../out ARCH=$AKBUILD_ARCH $AKBUILD_OPTINONS $AKBUILD_OUTPUTFILE $AKDTBO
cd $QSH
then
if [ $AKBUILD_ANYKERNEL = true ]; then
if [ -f "out/arch/$AKBUILD_ARCH/boot/$AKBUILD_OUTPUTFILE" ]; then
ZIPNAME="$AKBUILD_KERNELNAME-$AKBUILD_DEVICENAME-$(date '+%Y%m%d').zip"
git clone -q $AKBUILD_ANYKERNELURL -b $AKBUILD_ANYKERNELBRANCH AnyKernel3
cp out/arch/$AKBUILD_ARCH/boot/$AKBUILD_OUTPUTFILE AnyKernel3
if [ $AKBUILD_DTBO = true ]; then
cp out/arch/$AKBUILD_ARCH/boot/dtbo.img AnyKernel3
fi
cd AnyKernel3
zip -r9 "../$ZIPNAME" * -x '*.git*' README.md *placeholder
cd ..
rm -rf AnyKernel3
echo -e "\nCompleted in $((SECONDS / 60)) minute(s) and $((SECONDS % 60)) second(s) !\nOutput package: $ZIPNAME"
else
echo -e "\nBuild failed! Output file not found"
fi
else
echo -e "\nCompleted in $((SECONDS / 60)) minute(s) and $((SECONDS % 60)) second(s) !"
fi
else
echo -e "\nBuild failed! Something went wrong"
fi
else
echo "There is no clang"
if ! git clone --depth=1 $AKBUILD_CLANGURL -b $AKBUILD_CLANGBRANCH $AKCLANG; then
echo "Cloning failed! Aborting..."
else
akbuild build
fi
fi
else
echo "There is no kernel"
if ! git clone $AKDEPTH $AKBUILD_KERNELURL -b $AKBUILD_KERNELBRANCH $QSH/kernel; then
echo "Cloning failed! Aborting..."
else
akbuild build
fi
fi
fi
if [ "$1" = "help" ]; then
echo -e "$KBHELP\n\n$KCHELP"
fi
if [ "$1" = "clone" ]; then
if [ -d $QSH/kernel ]; then
echo "Kernel already cloned"
else
if ! git clone $AKDEPTH $AKBUILD_KERNELURL -b $AKBUILD_KERNELBRANCH $QSH/kernel; then
echo "Cloning failed! Aborting..."
fi
fi
if [ -d $AKCLANG ]; then
echo "Clang already cloned"
else
if ! git clone --depth=1 $AKBUILD_CLANGURL -b $AKBUILD_CLANGBRANCH $AKCLANG; then
echo "Cloning failed! Aborting..."
fi
fi
fi
if [ "$1" = "config" ] && [ "$2" = "-c" ] || [ "$2" = "--custom" ] && [ "$3" ] || [ "$2" = "-d" ] || [ "$2" = "--default" ] || [ "$2" = "-r" ] || [ "$2" = "--regenerate" ]; then
if [ "$2" = "-c" ] || [ "$2" = "--custom" ] && [ "$3" ]; then
CONFIGFILE="$3"
skloadconf
fi
if [ "$2" = "-d" ] || [ "$2" = "--default" ]; then
CONFIGFILE=$DEF_CONFIGFILE
skloadconf
fi
if [ "$2" = "-r" ] || [ "$2" = "--regenerate" ]; then
if [ "$3" ]; then
CONFIGFILE="$3"
else
if [ $CACONF = 0 ]; then
CONFIGFILE=$DEF_CONFIGFILE
fi
fi
kregen
fi
else
if [ "$1" = "config" ]; then
echo -e "$KCHELP"
fi
fi
if [ "$1" = "clean" ]; then
echo -e "Removing out folder..."
rm -rf $QSH/out
echo -e "\nOut folder removed"
fi
else
echo -e "$KBHELP"
fi
}
