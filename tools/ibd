#!/usr/bin/env dash
#
# Copyright (C) 2024 Maria Lisina
# Copyright (C) 2024 Danil Lisin
#
# Image Board Downloader
# Supported image boards: Gelbooru, Sankaku Channel, yande.re

set -e

for required in cat curl cut date grep jq md5sum mkdir rm sed sleep
do
    if ! command -v ${required} > /dev/null
    then
        missing="${missing} ${required}"
    fi
done

if [ -n "${missing}" ]
then
    echo "Missing dependencies:${missing}\n" \
        "For more information follow: https://command-not-found.com/"
    exit 1
fi

ibd_version="2.12"
ibd_cache="${HOME}/.cache/ibd/${$}"
ibd_config="${HOME}/.config/ibd"

rm -rf "${ibd_cache}"
mkdir -p "${ibd_cache}"

if [ -n "${1}" ]
then
    while getopts hap:rt:g:n:m:s:x:i:l:qc:d:y:e: ibd_options
    do
        case "${ibd_options}" in
            (h)
                ibd_help=0
            ;;
            (a)
                ibd_authorize=0
            ;;
            (p)
                ibd_dir="${OPTARG}"
            ;;
            (r)
                ibd_prune=0
            ;;
            (t)
                ibd_tags="${OPTARG}"
            ;;
            (g)
                ibd_range=${OPTARG}
            ;;
            (n)
                ibd_number=${OPTARG}
            ;;
            (m)
                ibd_download_mode="${OPTARG}"
            ;;
            (s)
                ibd_md5_mode="${OPTARG}"
            ;;
            (x)
                ibd_exclude_dirs="${OPTARG}"
            ;;
            (i)
                ibd_exclude_mode="${OPTARG}"
            ;;
            (l)
                ibd_sleep_time=${OPTARG}
            ;;
            (q)
                ibd_quiet=0
            ;;
            (c)
                ibd_connect_timeout=${OPTARG}
            ;;
            (d)
                ibd_download_timeout=${OPTARG}
            ;;
            (y)
                ibd_proxy="${OPTARG}"
            ;;
            (e)
                ibd_tries=${OPTARG}
            ;;
            (*)
                echo "See '${0} -h'"
                exit 1
            ;;
        esac
    done

    shift $((OPTIND - 1))
else
    ibd_help=0
fi

if [ -n "${ibd_help}" ]
then
    echo "Image Board Downloader v${ibd_version}" \
        "\n\nUsage: ${0} [options] [image board]" \
        "\n\nOptions:" \
        "\n  -h\t\tShow help information" \
        "\n  -a\t\tAuthorize to image board" \
        "\n  -p <dir>\tDownload artworks to directory" \
        "\n  -r\t\tRemove unwanted files according to list" \
        "\n  -t <tags>\tDownload artworks by tags" \
        "\n  -g <num>\tRange of artworks between curl requests, max: 100, default: 20" \
        "\n  -n <num>\tLimit number of artworks to download" \
        "\n  -m <mode>\tDownload mode" \
        "\n  -s <mode>\tMD5 checksums mode" \
        "\n  -x <dirs>\tExclude artworks found in directories" \
        "\n  -i <mode>\tExclude mode" \
        "\n  -l <secs>\tTime interval between curl requests" \
        "\n  -q\t\tDo not print file names" \
        "\n  -c <secs>\tAPI connetion timeout, default: 15 secs" \
        "\n  -d <secs>\tDownload timeout, default: 10 minutes" \
        "\n  -y <addr>\tUse proxy server" \
        "\n  -e <num>\tLimit number of curl request tries, default: 5" \
        "\n\nDownload modes:" \
        "\n  encount\tDownload new artworks only" \
        "\n  full\t\tRedownload undetected failed artworks" \
        "\n  repair\tRedownload detected failed artworks only" \
        "\n\nMD5 checksum modes:" \
        "\n  keep\t\tKeep artworks failed md5 checksums" \
        "\n  skip\t\tSkip MD5 checksums" \
        "\n\nExclude modes:" \
        "\n  download\tDownload artworks found failed in excluded directories" \
        "\n  remove\tDownload and remove artworks found failied in excluded directories" \
        "\n  reversive\tRemove artworks from excluded directories" \
        "\n  selfremove\tRemove artworks found in excluded directories" \
        "\n\nSupported image boards:" \
        "\n  gelbooru\tGelbooru <https://gelbooru.com/>" \
        "\n  sankaku\tSankaku Channel <https://chan.sankakucomplex.com/>" \
        "\n  yandere\tyande.re <https://yande.re/>"
    exit 0
fi

if [ -z "${ibd_dir}" ]
then
    echo "No download directory specified. See '${0} -h'"
    exit 1
fi

if [ -n "${ibd_prune}" ]
then
    echo "Pruning files..."

    if [ -f "${ibd_dir}/list.txt" ]
    then
        for ibd_filepath in "${ibd_dir}"/*
        do
            ibd_filename="${ibd_filepath##*/}"

            if ! [ -f "${ibd_filepath}" ]
            then
                continue
            fi

            if grep "${ibd_filename}" "${ibd_dir}/list.txt" > /dev/null
            then
                continue
            fi

            case "${ibd_filename}" in
                (failed.txt)
                    continue
                ;;
                (list.txt)
                    continue
                ;;
                (*)
                    rm -f "${ibd_filepath}"

                    if [ -z "${ibd_quiet}" ]
                    then
                        echo "${ibd_filename}"
                    fi
                ;;
            esac
        done
    fi
fi

if [ -n "${ibd_range}" ]
then
    if [ ${ibd_range} -gt 100 ]
    then
        ibd_range=100
    fi
else
    ibd_range=20
fi

if [ -n "${ibd_number}" ]
then
    if [ ${ibd_number} -lt ${ibd_range} ]
    then
        ibd_range=${ibd_number}
    fi
else
    ibd_number=-1
fi

if [ -n "${ibd_download_mode}" ]
then
    case "${ibd_download_mode}" in
        (encount)
            ibd_encount=0
        ;;
        (full)
            ibd_full=0
        ;;
        (repair)
            ibd_repair=0
        ;;
        (*)
            echo "Unrecognized download mode ${ibd_download_mode}. See '${0} -h'"
            exit 1
        ;;
    esac
fi

if [ -n "${ibd_md5_mode}" ]
then
    case "${ibd_md5_mode}" in
        (keep)
            ibd_keep=0
        ;;
        (skip)
            ibd_skip=0
        ;;
        (*)
            echo "Unrecognized MD5 checksums mode ${ibd_md5_mode}. See '${0} -h'"
            exit 1
        ;;
    esac
fi

if [ -n "${ibd_exclude_mode}" ]
then
    case "${ibd_exclude_mode}" in
        (download)
            ibd_xdownload=0
        ;;
        (remove)
            ibd_xremove=0
        ;;
        (reversive)
            ibd_xreversive=0
        ;;
        (selfremove)
            ibd_xselfremove=0
        ;;
        (*)
            echo "Unrecognized exclude mode ${ibd_exclude_mode}. See '${0} -h'"
            exit 1
        ;;
    esac
fi

if [ -z "${ibd_sleep_time}" ]
then
    ibd_sleep_time=0
fi

if [ -z "${ibd_connect_timeout}" ]
then
    ibd_connect_timeout=15
fi

if [ -z "${ibd_download_timeout}" ]
then
    ibd_download_timeout=600
fi

if [ -z "${ibd_tries}" ]
then
    ibd_tries=5
fi

if [ -n "${1}" ]
then
    case "${1}" in
        (gelbooru)
            ibd_gelbooru=0
        ;;
        (sankaku)
            ibd_sankaku=0
        ;;
        (yandere)
            ibd_yandere=0
        ;;
        (*)
            echo "Unrecognized image board ${1}. See '${0} -h'"
            exit 1
        ;;
    esac

    shift
else
    echo "No image board specified. See '${0} -h'"
    exit 1
fi

if [ -n "${1}" ]
then
    echo "Unrecognized action ${1}. See '${0} -h'"
    exit 1
fi

if [ -n "${ibd_gelbooru}" ]
then
    ibd_api="https://gelbooru.com"

    if [ -n "${ibd_authorize}" ]
    then
        echo "Gelbooru authorization is not supported yet and is not required"
        exit 1
    fi

    ibd_page=0
    ibd_posts_url="${ibd_api}/index.php"
    ibd_dfield1="page=dapi"
    ibd_dfield2="s=post"
    ibd_dfield3="q=index"
    ibd_dfield4="json=1"
    ibd_dlimit="limit"
    ibd_dpage="pid"
    ibd_dtags="tags"
    ibd_condition="has(\"post\")"
    ibd_iurl=".post[].file_url"
    ibd_ifilename="cut -d '/' -f 7"
fi

if [ -n "${ibd_sankaku}" ]
then
    ibd_config="${ibd_config}/sankaku"
    ibd_api="https://capi-v2.sankakucomplex.com"

    mkdir -p "${ibd_config}"

    if [ -z "${ibd_authorize}" ]
    then
        if [ -f "${ibd_config}/time" ]
        then
            current_date=$(date -u +%s)
            sankaku_date=$(cat "${ibd_config}/time")

            if [ $((current_date - sankaku_date)) -ge 36000 ]
            then
                ibd_authorize=1
            fi
        else
            ibd_authorize=1
        fi
    fi

    if [ -n "${ibd_authorize}" ]
    then
        if [ -f "${ibd_config}/login" ] && [ ${ibd_authorize} -eq 1 ]
        then
            sankaku_login="$(cat "${ibd_config}/login")"
        fi

        while [ -z "${sankaku_login}" ]
        do
            read -p "Login: " -r sankaku_login
        done

        if [ -f "${ibd_config}/password" ] && [ ${ibd_authorize} -eq 1 ]
        then
            sankaku_password="$(cat "${ibd_config}/password")"
        fi

        while [ -z "${sankaku_password}" ]
        do
            read -p "Password: " -r sankaku_password
        done

        echo "Refreshing access token..."

        curl --connect-timeout ${ibd_connect_timeout} \
            --data "{\"login\":\"${sankaku_login}\",\"password\":\"${sankaku_password}\"}" \
            --header "Content-Type: application/json" \
            --output "${ibd_cache}/login.json" \
            --proxy "${ibd_proxy}" \
            --request POST \
            --retry ${ibd_tries} \
            --retry-connrefused \
            --show-error \
            --silent \
            --user-agent "IBD" \
            "${ibd_api}/auth/token"

        if ! [ -f "${ibd_cache}/login.json" ]
        then
            echo "Failed to access '${ibd_api}'"
            exit 1
        fi

        if ! jq -e '.' "${ibd_cache}/login.json" > /dev/null
        then
            echo "Failed to parse json"
            exit 1
        fi

        if [ "$(jq -r '.success' "${ibd_cache}/login.json")" = "true" ]
        then
            echo "$(jq -r '.access_token' "${ibd_cache}/login.json")" > "${ibd_config}/token"
            echo "$(date -u +%s)" > "${ibd_config}/time"
            echo "${sankaku_login}" > "${ibd_config}/login"
            echo "${sankaku_password}" > "${ibd_config}/password"
        else
            echo "Error: $(jq -r '.error' "${ibd_cache}/login.json")"
            exit 1
        fi
    fi

    if ! [ -f "${ibd_config}/token" ]
    then
        echo "No access token found"
        exit 1
    fi

    ibd_page=1
    ibd_posts_url="${ibd_api}/posts"
    ibd_header="Authorization: Bearer $(cat "${ibd_config}/token")"
    ibd_dlimit="limit"
    ibd_dpage="page"
    ibd_dtags="tags"
    ibd_condition=".[0]|has(\"id\")"
    ibd_iurl=".[].file_url"
    ibd_ifilename="cut -d '?' -f 1 | cut -d '/' -f 7"
fi

if [ -n "${ibd_yandere}" ]
then
    ibd_api="https://yande.re"

    if [ -n "${ibd_authorize}" ]
    then
        echo "yande.re authorization is not supported yet and is not required"
        exit 1
    fi

    ibd_page=1
    ibd_posts_url="${ibd_api}/post.json"
    ibd_dlimit="limit"
    ibd_dpage="page"
    ibd_dtags="tags"
    ibd_condition=".[0]|has(\"id\")"
    ibd_iurl=".[].file_url"
    ibd_ifilename="sed 's/\/yande.re.*\./\./' | cut -d '/' -f 5"
fi

alias ibd_icut="${ibd_ifilename}"

mkdir -p "${ibd_dir}"
rm -f "${ibd_dir}/list.txt"

ibd_removed=0
ibd_success=0
ibd_failed=0
ibd_done=0

ibd_output="[Removed: \${ibd_removed}] [Success: \${ibd_success}] [Failed: \${ibd_failed}] [Done: \${ibd_done}]"
ibd_erase="\033[K"

echo "Downloading artworks..."
eval echo -n "\\\r${ibd_output} "

while [ -d "${ibd_dir}" ]
do
    curl --connect-timeout ${ibd_connect_timeout} \
        --data-urlencode "${ibd_dfield1}" \
        --data-urlencode "${ibd_dfield2}" \
        --data-urlencode "${ibd_dfield3}" \
        --data-urlencode "${ibd_dfield4}" \
        --data-urlencode "${ibd_dlimit}=${ibd_range}" \
        --data-urlencode "${ibd_dpage}=${ibd_page}" \
        --data-urlencode "${ibd_dtags}=${ibd_tags}" \
        --get \
        --header "${ibd_header}" \
        --output "${ibd_cache}/${ibd_page}_posts.json" \
        --proxy "${ibd_proxy}" \
        --retry ${ibd_tries} \
        --retry-connrefused \
        --show-error \
        --silent \
        --user-agent "IBD" \
        "${ibd_posts_url}"

    if ! [ -f "${ibd_cache}/${ibd_page}_posts.json" ]
    then
        echo "Failed to access '${ibd_api}'"
        exit 1
    fi

    if ! jq -e '.' "${ibd_cache}/${ibd_page}_posts.json" > /dev/null
    then
        echo "Failed to parse json"
        exit 1
    fi

    if ! jq -e "${ibd_condition}" "${ibd_cache}/${ibd_page}_posts.json" > /dev/null 2>&1
    then
        break
    fi

    echo "$(jq -r "${ibd_iurl}" "${ibd_cache}/${ibd_page}_posts.json")" > "${ibd_cache}/${ibd_page}_urls"

    for ibd_url in $(cat "${ibd_cache}/${ibd_page}_urls")
    do
        if ! [ -d "${ibd_dir}" ]
        then
            echo "No download directory found"
            exit 1
        fi

        if [ ${ibd_done} -eq ${ibd_number} ]
        then
            break 2
        fi

        if [ "${ibd_url}" = "null" ]
        then
            ibd_done=$((ibd_done + 1))

            if [ -z "${ibd_quiet}" ]
            then
                echo "\rIgnored empty URL${ibd_erase}"
            fi

            eval echo -n "\\\r${ibd_output} "
            continue
        fi

        ibd_filename="$(echo "${ibd_url}" | ibd_icut)"
        ibd_md5="$(echo "${ibd_filename}" | cut -d '.' -f 1)"
        ibd_continue=1

        if [ -f "${ibd_dir}/${ibd_md5}".* ]
        then
            if [ -n "${ibd_encount}" ]
            then
                break 2
            elif [ -n "${ibd_full}" ]
            then
                if [ "$(md5sum "${ibd_dir}/${ibd_md5}".* | cut -d ' ' -f 1)" = "${ibd_md5}" ]
                then
                    ibd_continue=0
                else
                    rm -f "${ibd_dir}}/${ibd_md5}".*

                    if [ -f "${ibd_dir}/failed.txt" ]
                    then
                        sed -e "s/${ibd_md5}//" -e '/^$/d' -i "${ibd_dir}/failed.txt"
                    fi

                    ibd_removed=$((ibd_removed + 1))
                fi
            elif [ -n "${ibd_repair}" ]
            then
                ibd_continue=0

                if [ -f "${ibd_dir}/failed.txt" ]
                then
                    if grep "${ibd_md5}" "${ibd_dir}/failed.txt" > /dev/null
                    then
                        ibd_continue=1

                        rm -f "${ibd_dir}/${ibd_md5}".*
                        sed -e "s/${ibd_md5}//" -e '/^$/d' -i "${ibd_dir}/failed.txt"
                        ibd_removed=$((ibd_removed + 1))
                    fi
                fi
            else
                ibd_continue=0
            fi
        fi

        if [ -n "${ibd_exclude_dirs}" ]
        then
            for ibd_exclude_dir in ${ibd_exclude_dirs}
            do
                if [ -f "${ibd_exclude_dir}/${ibd_md5}".* ]
                then
                    if [ -n "${ibd_xdownload}" ] || [ -n "${ibd_xremove}" ]
                    then
                        ibd_continue=0

                        if [ -n "${ibd_full}" ]
                        then
                            if ! [ "$(md5sum "${ibd_exclude_dir}/${ibd_md5}".* | cut -d ' ' -f 1)" = "${ibd_md5}" ]
                            then
                                ibd_continue=1

                                if [ -n "${ibd_xremove}" ]
                                then
                                    rm -f "${ibd_exclude_dir}/${ibd_md5}".*

                                    if [ -f "${ibd_exclude_dir}/failed.txt" ]
                                    then
                                        sed -e "s/${ibd_md5}//" -e '/^$/d' -i "${ibd_exclude_dir}/failed.txt"
                                    fi

                                    ibd_removed=$((ibd_removed + 1))
                                fi
                            fi
                        else
                            if [ -f "${ibd_exclude_dir}/failed.txt" ]
                            then
                                if grep "${ibd_md5}" "${ibd_exclude_dir}/failed.txt" > /dev/null
                                then
                                    ibd_continue=1

                                    if [ -n "${ibd_xremove}" ]
                                    then
                                        rm -f "${ibd_exclude_dir}/${ibd_md5}".*
                                        sed -e "s/${ibd_md5}//" -e '/^$/d' -i "${ibd_exclude_dir}/failed.txt"
                                        ibd_removed=$((ibd_removed + 1))
                                    fi
                                fi
                            fi
                        fi
                    elif [ -n "${ibd_xreversive}" ]
                    then
                        rm -f "${ibd_exclude_dir}/${ibd_md5}".*

                        if [ -f "${ibd_exclude_dir}/failed.txt" ]
                        then
                            sed -e "s/${ibd_md5}//" -e '/^$/d' -i "${ibd_exclude_dir}/failed.txt"
                        fi

                        ibd_removed=$((ibd_removed + 1))
                    elif [ -n "${ibd_xselfremove}" ]
                    then
                        ibd_continue=0

                        if [ -f "${ibd_dir}/${ibd_md5}".* ]
                        then
                            rm -f "${ibd_dir}/${ibd_md5}".*

                            if [ -f "${ibd_dir}/failed.txt" ]
                            then
                                sed -e "s/${ibd_md5}//" -e '/^$/d' -i "${ibd_dir}/failed.txt"
                            fi

                            ibd_removed=$((ibd_removed + 1))
                        fi
                    else
                        ibd_continue=0
                        break
                    fi
                fi
            done
        fi

        if [ ${ibd_continue} -eq 1 ]
        then
            curl --connect-timeout ${ibd_download_timeout} \
                --output "${ibd_dir}/${ibd_filename}" \
                --remote-time \
                --proxy "${ibd_proxy}" \
                --retry ${ibd_tries} \
                --retry-connrefused \
                --show-error \
                --silent \
                --user-agent "IBD" \
                "${ibd_url}"

            if [ -f "${ibd_dir}/${ibd_filename}" ]
            then
                if [ -n "${ibd_skip}" ]
                then
                    ibd_success=$((ibd_success + 1))
                else
                    if [ "$(md5sum "${ibd_dir}/${ibd_md5}".* | cut -d ' ' -f 1)" = "${ibd_md5}" ]
                    then
                        ibd_success=$((ibd_success + 1))
                    else
                        ibd_failed=$((ibd_failed + 1))
                        echo "${ibd_md5}" >> "${ibd_dir}/failed.txt"

                        if [ -z "${ibd_keep}" ]
                        then
                            rm -f "${ibd_dir}/${ibd_md5}".*
                            ibd_removed=$((ibd_removed + 1))
                        fi
                    fi
                fi
            else
                ibd_failed=$((ibd_failed + 1))
                echo "${ibd_md5}" >> "${ibd_dir}/failed.txt"
            fi
        fi

        if [ -f "${ibd_dir}/${ibd_filename}" ]
        then
            echo "${ibd_filename}" >> "${ibd_dir}/list.txt"
        fi

        if [ -z "${ibd_quiet}" ]
        then
            echo "\r${ibd_filename}${ibd_erase}"
        fi

        ibd_done=$((ibd_done + 1))
        eval echo -n "\\\r${ibd_output} "
    done

    ibd_page=$((ibd_page + 1))
    sleep ${ibd_sleep_time}
done

echo ''

if ! [ -s "${ibd_dir}/failed.txt" ]
then
    rm -f "${ibd_dir}/failed.txt"
fi

if [ -n "${ibd_exclude_dirs}" ]
then
    for ibd_exclude_dir in ${ibd_exclude_dirs}
    do
        if ! [ -s "${ibd_exclude_dirs}/failed.txt" ]
        then
            rm -f "${ibd_exclude_dirs}/failed.txt"
        fi
    done
fi
