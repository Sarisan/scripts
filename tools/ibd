#!/usr/bin/env dash
#
# Copyright (C) 2024 Maria Lisina
# Copyright (C) 2024 Danil Lisin
# SPDX-License-Identifier: Apache-2.0
#
# Image Board Downloader
# Supported image boards: Danbooru, Gelbooru, Idol Complex, Konachan.com, Sankaku Channel, yande.re

set -e
umask 77

ibd_version="3.11"
ibd_cache="${HOME}/.cache/ibd/${$}"
ibd_config="${HOME}/.config/ibd"

if [ -n "${1}" ]
then
    while getopts hao:rp:t:g:n:m:s:x:i:l:qc:d:y:e: ibd_options
    do
        case "${ibd_options}" in
            (h)
                ibd_help=0
            ;;
            (a)
                ibd_authorize=0
            ;;
            (o)
                ibd_dir="${OPTARG}"
            ;;
            (r)
                ibd_prune=0
            ;;
            (p)
                ibd_page=${OPTARG}
            ;;
            (t)
                ibd_tags="${OPTARG}"
            ;;
            (g)
                ibd_range=${OPTARG}
            ;;
            (n)
                ibd_number=${OPTARG}
            ;;
            (m)
                ibd_download_mode="${OPTARG}"
            ;;
            (s)
                ibd_md5_mode="${OPTARG}"
            ;;
            (x)
                ibd_exclude_dirs="${OPTARG}"
            ;;
            (i)
                ibd_exclude_mode="${OPTARG}"
            ;;
            (l)
                ibd_sleep_time=${OPTARG}
            ;;
            (q)
                ibd_quiet=0
            ;;
            (c)
                ibd_connect_timeout=${OPTARG}
            ;;
            (d)
                ibd_download_timeout=${OPTARG}
            ;;
            (y)
                ibd_proxy="${OPTARG}"
            ;;
            (e)
                ibd_tries=${OPTARG}
            ;;
            (*)
                echo "See '${0} -h'"
                exit 1
            ;;
        esac
    done

    shift $((OPTIND - 1))
else
    ibd_help=0
fi

if [ -n "${ibd_help}" ]
then
    echo "Image Board Downloader v${ibd_version}" \
        "\n\nUsage: ${0} [options] [image board]" \
        "\n\nOptions:" \
        "\n  -h\t\tShow help information" \
        "\n  -a\t\tAuthorize to image board" \
        "\n  -o <dir>\tDownload artworks to directory" \
        "\n  -r\t\tRemove unwanted files according to list" \
        "\n  -p <num>\tStart from specified results page" \
        "\n  -t <tags>\tDownload artworks by tags" \
        "\n  -g <num>\tRange of artworks between curl requests, max: 100, default: 20" \
        "\n  -n <num>\tLimit number of artworks to download" \
        "\n  -m <mode>\tDownload mode" \
        "\n  -s <mode>\tMD5 checksums mode" \
        "\n  -x <dirs>\tExclude artworks found in directories" \
        "\n  -i <mode>\tExclude mode" \
        "\n  -l <secs>\tTime interval between curl requests" \
        "\n  -q\t\tDo not print file names" \
        "\n  -c <secs>\tAPI connetion timeout, default: 15 secs" \
        "\n  -d <secs>\tDownload timeout, default: 10 minutes" \
        "\n  -y <addr>\tUse proxy server" \
        "\n  -e <num>\tLimit number of curl request tries, default: 5" \
        "\n\nDownload modes:" \
        "\n  encount\tDownload new artworks only" \
        "\n  full\t\tRedownload undetected failed artworks" \
        "\n  repair\tRedownload detected failed artworks only" \
        "\n\nMD5 checksum modes:" \
        "\n  keep\t\tKeep artworks failed md5 checksums" \
        "\n  skip\t\tSkip MD5 checksums" \
        "\n\nExclude modes:" \
        "\n  download\tDownload artworks found failed in excluded directories" \
        "\n  remove\tDownload and remove artworks found failied in excluded directories" \
        "\n  reversive\tRemove artworks from excluded directories" \
        "\n  selfremove\tRemove artworks found in excluded directories" \
        "\n\nSupported image boards:" \
        "\n  danbooru\tDanbooru <https://danbooru.donmai.us/>" \
        "\n  gelbooru\tGelbooru <https://gelbooru.com/>" \
        "\n  idol\t\tIdol Complex <https://idol.sankakucomplex.com/>" \
        "\n  konachan\tKonachan.com <https://konachan.com/>" \
        "\n  sankaku\tSankaku Channel <https://chan.sankakucomplex.com/>" \
        "\n  yandere\tyande.re <https://yande.re/>"
    exit 0
fi

for required in base64 cat curl cut date grep jq md5sum mkdir rm sed sha1sum sleep tr
do
    if ! command -v ${required} > /dev/null
    then
        missing="${missing} ${required}"
    fi
done

if [ -n "${missing}" ]
then
    echo "Missing dependencies:${missing}" \
        "\nFor more information follow: https://command-not-found.com/"
    exit 1
fi

if [ -z "${ibd_dir}" ]
then
    echo "No download directory specified. See '${0} -h'"
    exit 1
fi

if [ -n "${ibd_prune}" ]
then
    echo "Pruning files..."

    if [ -f "${ibd_dir}/list.txt" ]
    then
        for ibd_filepath in "${ibd_dir}"/*
        do
            ibd_filename="${ibd_filepath##*/}"

            if grep "${ibd_filename}" "${ibd_dir}/list.txt" > /dev/null
            then
                continue
            fi

            case "${ibd_filename}" in
                (failed.txt)
                    continue
                ;;
                (list.txt)
                    continue
                ;;
                (*)
                    rm -f "${ibd_filepath}"

                    if [ -z "${ibd_quiet}" ]
                    then
                        echo "${ibd_filename}"
                    fi
                ;;
            esac
        done
    fi
fi

if [ -n "${ibd_page}" ]
then
    if ! test ${ibd_page} -gt 0 > /dev/null 2>&1
    then
        echo "Illegal page number"
        exit 1
    fi
else
    ibd_page=1
fi

if [ -n "${ibd_range}" ]
then
    if ! test ${ibd_range} -gt 0 > /dev/null 2>&1
    then
        echo "Illegal range number"
        exit 1
    fi

    if [ ${ibd_range} -gt 100 ]
    then
        ibd_range=100
    fi
else
    ibd_range=20
fi

if [ -n "${ibd_number}" ]
then
    if ! test ${ibd_number} -gt 0 > /dev/null 2>&1
    then
        echo "Illegal limit number"
        exit 1
    fi

    if [ ${ibd_number} -lt ${ibd_range} ]
    then
        ibd_range=${ibd_number}
    fi
else
    ibd_number=-1
fi

if [ -n "${ibd_download_mode}" ]
then
    case "${ibd_download_mode}" in
        (encount | full | repair)
        ;;
        (*)
            echo "Unrecognized download mode ${ibd_download_mode}. See '${0} -h'"
            exit 1
        ;;
    esac
fi

if [ -n "${ibd_md5_mode}" ]
then
    case "${ibd_md5_mode}" in
        (keep | skip)
        ;;
        (*)
            echo "Unrecognized MD5 checksums mode ${ibd_md5_mode}. See '${0} -h'"
            exit 1
        ;;
    esac
fi

if [ -n "${ibd_exclude_mode}" ]
then
    case "${ibd_exclude_mode}" in
        (download | remove | reversive | selfremove)
        ;;
        (*)
            echo "Unrecognized exclude mode ${ibd_exclude_mode}. See '${0} -h'"
            exit 1
        ;;
    esac
fi

if [ -n "${ibd_sleep_time}" ]
then
    if ! test ${ibd_sleep_time} -gt 0 > /dev/null 2>&1
    then
        echo "Illegal sleep time"
        exit 1
    fi
else
    ibd_sleep_time=0
fi

if [ -n "${ibd_connect_timeout}" ]
then
    if ! test ${ibd_connect_timeout} -gt 0 > /dev/null 2>&1
    then
        echo "Illegal connect timeout"
        exit 1
    fi
else
    ibd_connect_timeout=15
fi

if [ -n "${ibd_download_timeout}" ]
then
    if ! test ${ibd_download_timeout} -gt 0 > /dev/null 2>&1
    then
        echo "Illegal download timeout"
        exit 1
    fi
else
    ibd_download_timeout=600
fi

if [ -n "${ibd_tries}" ]
then
    if ! test ${ibd_tries} -gt 0 > /dev/null 2>&1
    then
        echo "Illegal tries number"
        exit 1
    fi
else
    ibd_tries=5
fi

if [ -n "${1}" ]
then
    ibd_board="${1}"
    shift
else
    echo "No image board specified. See '${0} -h'"
    exit 1
fi

if [ -n "${1}" ]
then
    echo "Unrecognized action ${1}. See '${0} -h'"
    exit 1
fi

rm -fr "${ibd_cache}"
rm -f "${ibd_dir}/list.txt"
mkdir -p "${ibd_cache}"
mkdir -p "${ibd_dir}"

case "${ibd_board}" in
    (danbooru)
        ibd_api="https://danbooru.donmai.us"
        ibd_config="${ibd_config}/danbooru"

        if [ -n "${ibd_authorize}" ]
        then
            mkdir -p "${ibd_config}"

            until [ -n "${ibd_login}" ]
            do
                read -p "Login: " -r ibd_login
            done

            until [ -n "${ibd_api_key}" ]
            do
                read -p "API Key: " -r ibd_api_key
            done

            echo "Validating API Key..."

            ibd_file="${ibd_cache}/profile.json"

            curl --max-time ${ibd_connect_timeout} \
                --output "${ibd_file}" \
                --proxy "${ibd_proxy}" \
                --request GET \
                --retry ${ibd_tries} \
                --retry-all-errors \
                --show-error \
                --silent \
                --user "${ibd_login}:${ibd_api_key}" \
                --user-agent "IBD" \
                "${ibd_api}/profile.json"

            if ! [ -f "${ibd_file}" ]
            then
                echo "Failed to process request"
                exit 1
            fi

            if ! jq -e '.' "${ibd_file}" > /dev/null 2>&1
            then
                echo "An unknown error occurred"
                exit 1
            fi

            if [ "$(jq -r '.success' "${ibd_file}")" = "false" ]
            then
                echo "Error: $(jq -r '.message' "${ibd_file}")"
                exit 1
            fi

            if [ "$(jq -r '.name' "${ibd_file}")" != "${ibd_login}" ]
            then
                echo "An unexpectd error occurred"
                exit 1
            fi

            printf "%s" "${ibd_login}:${ibd_api_key}" | base64 > "${ibd_config}/token"
        fi

        if [ -f "${ibd_config}/token" ]
        then
            ibd_header="Authorization: Baisc $(cat "${ibd_config}/token")"
        fi

        ibd_data_url="${ibd_api}/posts.json"
        ibd_dlimit="limit"
        ibd_dpage="page"
        ibd_dquery="tags"
        ibd_iid="id"
        ibd_ifile="file_url"
        ibd_ifilename="cut -d '/' -f 7"
    ;;
    (gelbooru)
        ibd_api="https://gelbooru.com"
        ibd_config="${ibd_config}/gelbooru"

        if [ -n "${ibd_authorize}" ]
        then
            mkdir -p "${ibd_config}"

            until [ -n "${ibd_user_id}" ]
            do
                read -p "User ID: " -r ibd_user_id
            done

            until [ -n "${ibd_api_key}" ]
            do
                read -p "API key: " -r ibd_api_key
            done

            printf '%s="%s"\n%s="%s"' \
                "ibd_dfield5" "user_id=${ibd_user_id}" \
                "ibd_dfield6" "api_key=${ibd_api_key}" > "${ibd_config}/legacy"

            echo "Authorization cannot be verified, make sure you provided the correct credentials"
        fi

        if [ -f "${ibd_config}/legacy" ]
        then
            . "${ibd_config}/legacy"
        fi

        ibd_data_url="${ibd_api}/index.php"
        ibd_dfield1="page=dapi"
        ibd_dfield2="s=post"
        ibd_dfield3="q=index"
        ibd_dfield4="json=1"
        ibd_dlimit="limit"
        ibd_dpage="pid"
        ibd_dquery="tags"
        ibd_ioffset="-1"
        ibd_iarray="post"
        ibd_iid="id"
        ibd_ifile="file_url"
        ibd_ifilename="cut -d '/' -f 7"
    ;;
    (idol)
        ibd_api="https://iapi.sankakucomplex.com"
        ibd_config="${ibd_config}/idol"

        if [ -n "${ibd_authorize}" ]
        then
            mkdir -p "${ibd_config}"

            until [ -n "${ibd_login}" ]
            do
                read -p "Login: " -r ibd_login
            done

            until [ -n "${ibd_password}" ]
            do
                read -p "Password: " -r ibd_password
            done

            ibd_login_lower="$(printf "%s" "${ibd_login}" | tr '[:upper:]' '[:lower:]')"
            ibd_password_hash="$(printf "choujin-steiner--%s--" "${ibd_password}" | sha1sum | cut -d ' ' -f 1)"
            ibd_appkey="$(printf "sankakuapp_%s_Z5NE9YASej" "${ibd_login_lower}" | sha1sum | cut -d ' ' -f 1)"

            printf '%s="%s"\n%s="%s"\n%s="%s"' \
                "ibd_dfield4" "login=${ibd_login}" \
                "ibd_dfield5" "password_hash=${ibd_password_hash}" \
                "ibd_dfield6" "appkey=${ibd_appkey}" > "${ibd_config}/legacy"

            echo "Authorization cannot be verified, make sure you provided the correct credentials"
        fi

        if [ -f "${ibd_config}/legacy" ]
        then
            . "${ibd_config}/legacy"
        fi

        ibd_data_url="${ibd_api}/posts.json"
        ibd_dlimit="limit"
        ibd_dpage="page"
        ibd_dquery="tags"
        ibd_iid="id"
        ibd_ifile="file_url"
        ibd_ifilename="cut -d '?' -f 1 | cut -d '/' -f 7"
    ;;
    (sankaku)
        ibd_api="https://capi-v2.sankakucomplex.com"
        ibd_config="${ibd_config}/sankaku"

        if [ -z "${ibd_authorize}" ]
        then
            if [ -f "${ibd_config}/time" ]
            then
                current_date=$(date +%s)
                previous_date=$(cat "${ibd_config}/time")

                if [ $((current_date - previous_date)) -ge 36000 ]
                then
                    ibd_authorize=1
                fi
            fi
        fi

        if [ -n "${ibd_authorize}" ]
        then
            mkdir -p "${ibd_config}"

            if [ -f "${ibd_config}/login" ] && [ ${ibd_authorize} -eq 1 ]
            then
                ibd_login="$(cat "${ibd_config}/login")"
            fi

            if [ -f "${ibd_config}/password" ] && [ ${ibd_authorize} -eq 1 ]
            then
                ibd_password="$(cat "${ibd_config}/password")"
            fi

            until [ -n "${ibd_login}" ]
            do
                read -p "Login: " -r ibd_login
            done

            until [ -n "${ibd_password}" ]
            do
                read -p "Password: " -r ibd_password
            done

            if [ ${ibd_authorize} -eq 1 ]
            then
                echo "Refreshing access token..."
            else
                echo "Retrieving access token..."
            fi

            ibd_login_data="$(jq --null-input --compact-output \
                --arg login "${ibd_login}" \
                --arg password "${ibd_password}" \
                '{"login": $login, "password": $password}')"

            ibd_file="${ibd_cache}/token.json"

            curl --data "${ibd_login_data}" \
                --header "Content-Type: application/json" \
                --max-time ${ibd_connect_timeout} \
                --output "${ibd_file}" \
                --proxy "${ibd_proxy}" \
                --request POST \
                --retry ${ibd_tries} \
                --retry-all-errors \
                --show-error \
                --silent \
                --user-agent "IBD" \
                "${ibd_api}/auth/token"

            if ! [ -f "${ibd_file}" ]
            then
                echo "Failed to process request"
                exit 1
            fi

            if ! jq -e '.' "${ibd_file}" > /dev/null 2>&1
            then
                echo "An unknown error occurred"
                exit 1
            fi

            if [ "$(jq -r '.success' "${ibd_file}")" != "true" ]
            then
                echo "Error: $(jq -r '.error' "${ibd_file}")"
                exit 1
            fi

            printf "%s" "${ibd_login}" > "${ibd_config}/login"
            printf "%s" "${ibd_password}" > "${ibd_config}/password"
            jq -r '.access_token' "${ibd_file}" > "${ibd_config}/token"
            date +%s > "${ibd_config}/time"
        fi

        if [ -f "${ibd_config}/token" ]
        then
            ibd_header="Authorization: Bearer $(cat "${ibd_config}/token")"
        fi

        ibd_data_url="${ibd_api}/posts"
        ibd_dlimit="limit"
        ibd_dpage="page"
        ibd_dquery="tags"
        ibd_iid="id"
        ibd_ifile="file_url"
        ibd_ifilename="cut -d '?' -f 1 | cut -d '/' -f 7"
    ;;
    (konachan | yandere)
        case "${ibd_board}" in
            (konachan)
                ibd_api="https://konachan.com"
                ibd_config="${ibd_config}/konachan"
                ibd_pattern="Konachan.com"
            ;;
            (yandere)
                ibd_api="https://yande.re"
                ibd_config="${ibd_config}/yandere"
                ibd_pattern="yande.re"
            ;;
        esac

        if [ -n "${ibd_authorize}" ]
        then
            mkdir -p "${ibd_config}"

            until [ -n "${ibd_username}" ]
            do
                read -p "Username: " -r ibd_username
            done

            until [ -n "${ibd_api_key}" ]
            do
                read -p "API Key: " -r ibd_api_key
            done

            echo "Validating API Key..."

            ibd_file="${ibd_cache}/user.json"

            curl --data-urlencode "username=${ibd_username}" \
                --data-urlencode "api_key=${ibd_api_key}" \
                --max-time ${ibd_connect_timeout} \
                --output "${ibd_file}" \
                --proxy "${ibd_proxy}" \
                --retry ${ibd_tries} \
                --retry-all-errors \
                --show-error \
                --silent \
                --user-agent "IBD" \
                "${ibd_api}/user.json"

            if ! [ -f "${ibd_file}" ]
            then
                echo "Failed to process request"
                exit 1
            fi

            if ! jq -e '.' "${ibd_file}" > /dev/null 2>&1
            then
                echo "Invalid username or API key"
                exit 1
            fi

            printf '%s="%s"\n%s="%s"' \
                "ibd_dfield5" "username=${ibd_username}" \
                "ibd_dfield6" "api_key=${ibd_api_key}" > "${ibd_config}/legacy"
        fi

        if [ -f "${ibd_config}/legacy" ]
        then
            . "${ibd_config}/legacy"
        fi

        ibd_data_url="${ibd_api}/post.json"
        ibd_dlimit="limit"
        ibd_dpage="page"
        ibd_dquery="tags"
        ibd_iid="id"
        ibd_ifile="file_url"
        ibd_ifilename="sed 's/\/${ibd_pattern}.*\./\./' | cut -d '/' -f 5"
    ;;
    (*)
        echo "Unrecognized image board ${ibd_board}. See '${0} -h'"
        exit 1
    ;;
esac

ibd_removed=0
ibd_success=0
ibd_failed=0
ibd_done=0

ibd_output="\r[Removed: %s] [Success: %s] [Failed: %s] [Done: %s] "
ibd_erase="\r%s\033[K\n"

echo "Downloading artworks..."
printf "${ibd_output}" "${ibd_removed}" "${ibd_success}" "${ibd_failed}" "${ibd_done}"

if [ -n "${ibd_tags}" ]
then
    ibd_query="${ibd_dquery}=${ibd_tags}"
fi

while [ -d "${ibd_dir}" ]
do
    ibd_file="${ibd_cache}/${ibd_page}_posts.json"

    curl --data-urlencode "${ibd_dfield1}" \
        --data-urlencode "${ibd_dfield2}" \
        --data-urlencode "${ibd_dfield3}" \
        --data-urlencode "${ibd_dfield4}" \
        --data-urlencode "${ibd_dfield5}" \
        --data-urlencode "${ibd_dfield6}" \
        --data-urlencode "${ibd_dlimit}=${ibd_range}" \
        --data-urlencode "${ibd_dpage}=$((ibd_page + ibd_ioffset))" \
        --data-urlencode "${ibd_query}" \
        --get \
        --header "${ibd_header}" \
        --max-time ${ibd_connect_timeout} \
        --output "${ibd_file}" \
        --proxy "${ibd_proxy}" \
        --retry ${ibd_tries} \
        --retry-all-errors \
        --show-error \
        --silent \
        --user-agent "IBD" \
        "${ibd_data_url}"

    if ! [ -f "${ibd_file}" ]
    then
        echo "Failed to access '${ibd_api}'"
        exit 1
    fi

    if ! jq -e '.' "${ibd_file}" > /dev/null 2>&1
    then
        echo "An unknown error occurred"
        exit 1
    fi

    if ! jq -e ".${ibd_iarray}[0]|has(\"${ibd_iid}\")" "${ibd_file}" > /dev/null 2>&1
    then
        break
    fi

    ibd_array=0

    until [ "$(jq -r ".${ibd_iarray}[${ibd_array}].${ibd_iid}" "${ibd_file}")" = "null" ]
    do
        ibd_file_url="$(jq -r ".${ibd_iarray}[${ibd_array}].${ibd_ifile}" "${ibd_file}")"

        if [ ${ibd_done} -eq ${ibd_number} ]
        then
            break 2
        fi

        if ! [ -d "${ibd_dir}" ]
        then
            echo "No download directory found"
            exit 1
        fi

        if [ -z "${ibd_file_url}" ] || [ "${ibd_file_url}" = "null" ]
        then
            if [ -z "${ibd_quiet}" ]
            then
                printf "${ibd_erase}" "Ignored empty URL"
            fi

            ibd_done=$((ibd_done + 1))
            printf "${ibd_output}" "${ibd_removed}" "${ibd_success}" "${ibd_failed}" "${ibd_done}"

            ibd_array=$((ibd_array + 1))
            continue
        elif [ "${ibd_board}" = "idol" ]
        then
            ibd_file_url="https:${ibd_file_url}"
        fi

        ibd_filename="$(printf "%s" "${ibd_file_url}" | eval ${ibd_ifilename})"
        ibd_md5="$(printf "%s" "${ibd_filename}" | cut -d '.' -f 1)"
        ibd_download=1
        ibd_exclude=1

        if [ -f "${ibd_dir}/${ibd_md5}".* ]
        then
            ibd_download=0

            case "${ibd_download_mode}" in
                (encount)
                    break 2
                ;;
                (full)
                    if [ "$(md5sum "${ibd_dir}/${ibd_md5}".* | cut -d ' ' -f 1)" != "${ibd_md5}" ]
                    then
                        ibd_download=1

                        rm -f "${ibd_dir}}/${ibd_md5}".*

                        if [ -f "${ibd_dir}/failed.txt" ]
                        then
                            sed -e "s/${ibd_md5}//" -e '/^$/d' -i "${ibd_dir}/failed.txt"
                        fi

                        ibd_removed=$((ibd_removed + 1))
                    fi
                ;;
                (repair)
                    if grep "${ibd_md5}" "${ibd_dir}/failed.txt" > /dev/null
                    then
                        ibd_download=1

                        rm -f "${ibd_dir}/${ibd_md5}".*
                        sed -e "s/${ibd_md5}//" -e '/^$/d' -i "${ibd_dir}/failed.txt"
                        ibd_removed=$((ibd_removed + 1))
                    fi
                ;;
            esac
        fi

        for ibd_exclude_dir in ${ibd_exclude_dirs}
        do
            if [ -f "${ibd_exclude_dir}/${ibd_md5}".* ]
            then
                ibd_exclude=0

                case "${ibd_exclude_mode}" in
                    (download | remove)
                        case "${ibd_download_mode}" in
                            (full)
                                if [ "$(md5sum "${ibd_exclude_dir}/${ibd_md5}".* | cut -d ' ' -f 1)" != "${ibd_md5}" ]
                                then
                                    ibd_exclude=1

                                    if [ "${ibd_exclude_mode}" = "remove" ]
                                    then
                                        rm -f "${ibd_exclude_dir}/${ibd_md5}".*

                                        if [ -f "${ibd_exclude_dir}/failed.txt" ]
                                        then
                                            sed -e "s/${ibd_md5}//" -e '/^$/d' -i "${ibd_exclude_dir}/failed.txt"
                                        fi

                                        ibd_removed=$((ibd_removed + 1))
                                    fi
                                fi
                            ;;
                            (repair)
                                if [ -f "${ibd_exclude_dir}/failed.txt" ]
                                then
                                    if grep "${ibd_md5}" "${ibd_exclude_dir}/failed.txt" > /dev/null
                                    then
                                        ibd_exclude=1

                                        if [ "${ibd_exclude_mode}" = "remove" ]
                                        then
                                            rm -f "${ibd_exclude_dir}/${ibd_md5}".*
                                            sed -e "s/${ibd_md5}//" -e '/^$/d' -i "${ibd_exclude_dir}/failed.txt"
                                            ibd_removed=$((ibd_removed + 1))
                                        fi
                                    fi
                                fi
                            ;;
                        esac
                    ;;
                    (reversive)
                        case "${ibd_download_mode}" in
                            (full | repair)
                                ibd_exclude=1
                            ;;
                        esac

                        rm -f "${ibd_exclude_dir}/${ibd_md5}".*

                        if [ -f "${ibd_exclude_dir}/failed.txt" ]
                        then
                            sed -e "s/${ibd_md5}//" -e '/^$/d' -i "${ibd_exclude_dir}/failed.txt"
                        fi

                        ibd_removed=$((ibd_removed + 1))
                    ;;
                    (selfremove)
                        if [ -f "${ibd_dir}/${ibd_md5}".* ]
                        then
                            rm -f "${ibd_dir}/${ibd_md5}".*

                            if [ -f "${ibd_dir}/failed.txt" ]
                            then
                                sed -e "s/${ibd_md5}//" -e '/^$/d' -i "${ibd_dir}/failed.txt"
                            fi

                            ibd_removed=$((ibd_removed + 1))
                        fi
                    ;;
                esac
            fi
        done

        if [ ${ibd_download} -eq 1 ] && [ ${ibd_exclude} -eq 1 ]
        then
            umask 22

            curl --max-time ${ibd_download_timeout} \
                --output "${ibd_dir}/${ibd_filename}" \
                --proxy "${ibd_proxy}" \
                --remote-time \
                --retry ${ibd_tries} \
                --retry-all-errors \
                --show-error \
                --silent \
                --user-agent "IBD" \
                "${ibd_file_url}"

            if [ -f "${ibd_dir}/${ibd_filename}" ]
            then
                case "${ibd_md5_mode}" in
                    (skip)
                        ibd_success=$((ibd_success + 1))
                    ;;
                    (*)
                        if [ "$(md5sum "${ibd_dir}/${ibd_md5}".* | cut -d ' ' -f 1)" != "${ibd_md5}" ]
                        then
                            ibd_failed=$((ibd_failed + 1))
                            printf "%s\n" "${ibd_md5}" >> "${ibd_dir}/failed.txt"

                            if [ "${ibd_md5_mode}" != "keep" ]
                            then
                                rm -f "${ibd_dir}/${ibd_md5}".*
                                ibd_removed=$((ibd_removed + 1))
                            fi
                        else
                            ibd_success=$((ibd_success + 1))
                        fi
                    ;;
                esac
            else
                ibd_failed=$((ibd_failed + 1))
                printf "%s\n" "${ibd_md5}" >> "${ibd_dir}/failed.txt"
            fi

            printf "%s\n" "${ibd_filename}" >> "${ibd_dir}/list.txt"

            umask 77
        fi

        if [ -z "${ibd_quiet}" ]
        then
            printf "${ibd_erase}" "${ibd_filename}"
        fi

        ibd_done=$((ibd_done + 1))
        printf "${ibd_output}" "${ibd_removed}" "${ibd_success}" "${ibd_failed}" "${ibd_done}"

        ibd_array=$((ibd_array + 1))
    done

    ibd_page=$((ibd_page + 1))
    sleep ${ibd_sleep_time}
done

printf "\n"

if ! [ -s "${ibd_dir}/failed.txt" ]
then
    rm -f "${ibd_dir}/failed.txt"
fi

for ibd_exclude_dir in ${ibd_exclude_dirs}
do
    if ! [ -s "${ibd_exclude_dirs}/failed.txt" ]
    then
        rm -f "${ibd_exclude_dirs}/failed.txt"
    fi
done
