#!/bin/busybox sh
#
# Copyright (C) 2024 Maria Lisina
# Copyright (C) 2024 Danil Lisin
#
# Image Board Downloader
# Supported image boards: Gelbooru, Sankaku Channel, yande.re

. ${0%/*}/../iutils

depends curl jq

ibd_version="1.6"
ibd_cache="${HOME}/.cache/ibd/${$}"
ibd_config="${HOME}/.config/ibd"
ibd_erase="\033[K"

rm -rf "${ibd_cache}"
dcreate "${ibd_cache}" "cache"

if [[ -n "${1}" ]]
then
    ibd_options="$(getopt -l help,authorize,path:,tags:,range:,number:,encount,skip,keep,repair,full-repair,exclude:,reversive,exclude-download,exclude-remove,exclude-selfremove,sleep:,quiet,cn-timeout:,dl-timeout:,proxy: -- hap:t:g:n:eskrfx:iomvl:qc:d:P:a "${@}")"
    eval set -- "${ibd_options}"

    while [[ -n "${1}" ]]
    do
        case "${1}" in
        -h | --help)
            ibd_help=0
        ;;
        -p | --path)
            ibd_dir="${2}"
            shift
        ;;
        -t | --tags)
            ibd_tags="${2}"
            shift
        ;;
        -n | --number)
            ibd_number=${2}
            shift
        ;;
        -e | --encount)
            ibd_encount=0
        ;;
        -s | --skip)
            ibd_skip_md5=0
        ;;
        -k | --keep)
            ibd_keep_md5=0
        ;;
        -r | --repair)
            ibd_repair=0
        ;;
        -f | --full-repair)
            ibd_full_repair=0
        ;;
        -x | --exclude)
            ibd_exclude_loop="${2}"
            shift
        ;;
        -i | --reversive)
            ibd_reversive=0
        ;;
        -o | --exclude-download)
            ibd_xdownload=0
        ;;
        -m | --exclude-remove)
            ibd_xremove=0
        ;;
        -v | --exclude-selfremove)
            ibd_xselfremove=0
        ;;
        -l | --sleep)
            ibd_sleep_time=${2}
            shift
        ;;
        -q | --quiet)
            ibd_quiet=0
        ;;
        -c | --cn-timeout)
            ibd_connect_timeout=${2}
            shift
        ;;
        -d | --dl-timeout)
            ibd_download_timeout=${2}
            shift
        ;;
        -P | --proxy)
            ibd_proxy="${2}"
            shift
        ;;
        -a | --authorize)
            ibd_auth=0
        ;;
        -g | --range)
            ibd_range=${2}
            shift
        ;;
        --)
            shift
            break
        ;;
        *)
            exit 1
        ;;
        esac
        shift
    done

    if [[ -n "${1}" ]]
    then
        ibd_image_board="${1}"
        shift
    fi

    if [[ -n "${1}" ]]
    then
        echo "Unrecognized action: '${1}'. See '${0} --help'"
        exit 1
    fi
else
    ibd_help=0
fi

if [[ -n "${ibd_help}" ]]
then
    echo -e "Image Board Downloader v${ibd_version}\n\nUsage: ${0} [OPTIONS] [IMAGE BOARD]\n" \
            "\nGlobal options:\n" \
            "\t-h, --help\t\t\tShow help information\n" \
            "\t-a, --authorize\t\t\tAuthorize to image board\n" \
            "\t-p, --path <directory>\t\tDownload artworks to directory\n" \
            "\t-t, --tags <tags>\t\tDownload artworks by tags\n" \
            "\t-g, --range <number>\t\tRange of artworks between curl requests, max: 100, default: 20\n" \
            "\t-n, --number <number>\t\tLimit number of artworks to download\n" \
            "\t-e, --encount\t\t\tDownload new artworks only\n" \
            "\t-s, --skip\t\t\tSkip md5 checksums\n" \
            "\t-k, --keep\t\t\tKeep artworks failed md5 checksums\n" \
            "\t-r, --repair\t\t\tRedownload detected failed artworks only\n" \
            "\t-f, --full-repair\t\tRedownload undetected failed artworks\n" \
            "\t-x, --exclude <directories>\tExclude artworks found in directories\n" \
            "\t-i, --reversive\t\t\tRemove artworks from excluded directories\n" \
            "\t-o, --exclude-download\t\tDownload failed artworks found in excluded directories\n" \
            "\t-m, --exclude-remove\t\tDownload and remove failed artworks from excluded directories\n" \
            "\t-v, --exclude-selfremove\tRemove artworks found in excluded directories\n" \
            "\t-l, --sleep <seconds>\t\tTime interval between curl requests\n" \
            "\t-q, --quiet\t\t\tDo not print file names\n" \
            "\t-c, --cn-timeout <seconds>\tAPI connetion timeout, default: 15 seconds\n" \
            "\t-d, --dl-timeout <seconds>\tDownload timeout, default: 24 hours\n" \
            "\t-P, --proxy <address>\t\tUse proxy server\n" \
            "\nSupported image boards:\n" \
            "\tgelbooru\t\t\tGelbooru <https://gelbooru.com/>\n" \
            "\tsankaku\t\t\t\tSankaku Channel <https://chan.sankakucomplex.com/>\n" \
            "\tyandere\t\t\t\tyande.re <https://yande.re/>"
    exit 0
fi

if [[ -n "${ibd_image_board}" ]]
then
    case "${ibd_image_board}" in
    gelbooru)
        ibd_gelbooru=0
    ;;
    sankaku)
        ibd_sankaku=0
    ;;
    yandere)
        ibd_yandere=0
    ;;
    *)
        echo "Unrecognized image board: '${ibd_image_board}'. See '${0} --help'"
        exit 1
    ;;
    esac
else
    echo "No image board specified. See '${0} --help'"
    exit 1
fi

if [[ -n "${ibd_gelbooru}" ]]
then
    ibd_api="https://gelbooru.com"

    if [[ -n "${ibd_auth}" ]]
    then
        echo "Gelbooru authorization is not supported yet and is not required"
        exit 1
    fi

    ibd_page=0
    ibd_posts_url="${ibd_api}/index.php"
    ibd_dfield1="page=dapi"
    ibd_dfield2="s=post"
    ibd_dfield3="q=index"
    ibd_dfield4="json=1"
    ibd_dlimit="limit"
    ibd_dpage="pid"
    ibd_dtags="tags"
    ibd_condition="has(\"post\")"
    ibd_iurl=".post[].file_url"
    ibd_ifilename="cut -d '/' -f 7"
fi

if [[ -n "${ibd_sankaku}" ]]
then
    ibd_config="${ibd_config}/sankaku"
    ibd_api="https://capi-v2.sankakucomplex.com"

    dcreate "${ibd_config}" "Sankaku Channel config"

    if [[ -f "${ibd_config}/time" ]]
    then
        current_date=$(date -u +%s)
        sankaku_date=$(cat "${ibd_config}/time")

        if [[ $((current_date - sankaku_date)) -ge 36000 ]]
        then
            ibd_auth=1
        fi
    else
        ibd_auth=1
    fi

    if [[ -n "${ibd_auth}" ]]
    then
        if [[ -f "${ibd_config}/login" ]] && [[ ${ibd_auth} -eq 1 ]]
        then
            sankaku_login="$(cat "${ibd_config}/login")"
        fi

        while [[ -z "${sankaku_login}" ]]
        do
            read -p "Login: " sankaku_login
        done

        if [[ -f "${ibd_config}/password" ]] && [[ ${ibd_auth} -eq 1 ]]
        then
            sankaku_password="$(cat "${ibd_config}/password")"
        fi

        while [[ -z "${sankaku_password}" ]]
        do
            read -p "Password: " -s sankaku_password
            echo ''
        done

        echo "Refreshing access token..."

        curl --connect-timeout 10 \
            --data "{\"login\":\"${sankaku_login}\",\"password\":\"${sankaku_password}\"}" \
            --header "Content-Type: application/json" \
            --output "${ibd_cache}/login.json" \
            --proxy "${ibd_proxy}" \
            --request POST \
            --show-error \
            --silent \
            --user-agent "IBD" \
            "${ibd_api}/auth/token"

        if [[ -f "${ibd_cache}/login.json" ]]
        then
            if jq -e '.' "${ibd_cache}/login.json" &> /dev/null
            then
                if [[ "$(jq -r '.success' "${ibd_cache}/login.json")" == "true" ]]
                then
                    fwrite "$(jq -r '.access_token' "${ibd_cache}/login.json")" "${ibd_config}/token" "token"
                    fwrite "$(date -u +%s)" "${ibd_config}/time" "time"
                    fwrite "${sankaku_login}" "${ibd_config}/login" "login"
                    fwrite "${sankaku_password}" "${ibd_config}/password" "password"
                    echo "Authorized successfully"
                else
                    echo "Error: $(jq -r '.error' "${ibd_cache}/login.json")"
                    exit 1
                fi
            else
                echo "Invalid json detected"
                exit 1
            fi
        else
            echo "Failed to access '${ibd_api}'"
            exit 1
        fi
    fi

    if ! [[ -f "${ibd_config}/token" ]]
    then
        echo "No access token found"
        exit 1
    fi

    ibd_page=1
    ibd_posts_url="${ibd_api}/posts"
    ibd_header="Authorization: Bearer $(cat "${ibd_config}/token")"
    ibd_dlimit="limit"
    ibd_dpage="page"
    ibd_dtags="tags"
    ibd_condition=".[0]|has(\"id\")"
    ibd_iurl=".[].file_url"
    ibd_ifilename="cut -d '?' -f 1 | cut -d '/' -f 7"
fi

if [[ -n "${ibd_yandere}" ]]
then
    ibd_api="https://yande.re"

    if [[ -n "${ibd_auth}" ]]
    then
        echo "yande.re authorization is not supported yet and is not required"
        exit 1
    fi

    ibd_page=1
    ibd_posts_url="${ibd_api}/post.json"
    ibd_dlimit="limit"
    ibd_dpage="page"
    ibd_dtags="tags"
    ibd_condition=".[0]|has(\"id\")"
    ibd_iurl=".[].file_url"
    ibd_ifilename="sed 's/\/yande.re.*\./\./' | cut -d '/' -f 5"
fi

if [[ -z "${ibd_dir}" ]]
then
    echo "No download directory specified. See '${0} --help'"
    exit 1
fi

if [[ -n "${ibd_range}" ]]
then
    if [[ ${ibd_range} -gt 100 ]]
    then
        ibd_range=100
    fi
else
    ibd_range=20
fi

if [[ -n "${ibd_number}" ]]
then
    if [[ ${ibd_number} -lt ${ibd_range} ]]
    then
        ibd_range=${ibd_number}
    fi
else
    ibd_number=-1
fi

if [[ -z "${ibd_connect_timeout}" ]]
then
    ibd_connect_timeout=15
fi

if [[ -z "${ibd_download_timeout}" ]]
then
    ibd_download_timeout=86400
fi

if [[ -z "${ibd_sleep_time}" ]]
then
    ibd_sleep_time=0
fi

alias ibd_icut="${ibd_ifilename}"

dcreate "${ibd_dir}" "download"

ibd_removed=0
ibd_success=0
ibd_failed=0
ibd_done=0

ibd_absolute_break=1

echo "Downloading artworks..."
echo -e -n "\r[Removed: ${ibd_removed}] [Success: ${ibd_success}] [Failed: ${ibd_failed}] [Done: ${ibd_done}] "

until [[ ${ibd_absolute_break} -eq 0 ]]
do
    curl --connect-timeout ${ibd_connect_timeout} \
        --data-urlencode "${ibd_dfield1}" \
        --data-urlencode "${ibd_dfield2}" \
        --data-urlencode "${ibd_dfield3}" \
        --data-urlencode "${ibd_dfield4}" \
        --data-urlencode "${ibd_dlimit}=${ibd_range}" \
        --data-urlencode "${ibd_dpage}=${ibd_page}" \
        --data-urlencode "${ibd_dtags}=${ibd_tags}" \
        --get \
        --header "${ibd_header}" \
        --output "${ibd_cache}/${ibd_page}_posts.json" \
        --proxy "${ibd_proxy}" \
        --show-error \
        --silent \
        --user-agent "IBD" \
        "${ibd_posts_url}"

    if [[ -f "${ibd_cache}/${ibd_page}_posts.json" ]]
    then
        if ! jq -e '.' "${ibd_cache}/${ibd_page}_posts.json" &> /dev/null
        then
            echo "Invalid json detected"
            exit 1
        fi
    else
        echo -e "Failed to access '${ibd_api}'"
        exit 1
    fi

    if ! [[ "$(jq "${ibd_condition}" "${ibd_cache}/${ibd_page}_posts.json")" == "true" ]]
    then
        break
    fi

    fwrite "$(jq -r "${ibd_iurl}" "${ibd_cache}/${ibd_page}_posts.json")" "${ibd_cache}/${ibd_page}_urls" "urls"

    for ibd_url in $(cat "${ibd_cache}/${ibd_page}_urls")
    do
        if ! [[ -d "${ibd_dir}" ]]
        then
            echo "No download directory found"
            exit 1
        fi

        if [[ ${ibd_done} -eq ${ibd_number} ]]
        then
            ibd_absolute_break=0
            break
        fi

        if [[ "${ibd_url}" == "null" ]]
        then
            ibd_done=$((ibd_done + 1))
            echo -e "\rIgnored empty URL${ibd_erase}"
            echo -e -n "\r[Removed: ${ibd_removed}] [Success: ${ibd_success}] [Failed: ${ibd_failed}] [Done: ${ibd_done}] "
            break
        fi

        ibd_filename="$(echo "${ibd_url}" | ibd_icut)"
        ibd_md5="$(echo "${ibd_filename}" | cut -d '.' -f 1)"
        ibd_continue=1

        if ls "${ibd_dir}/${ibd_md5}."* &> /dev/null
        then
            if [[ -n "${ibd_repair}" ]]
            then
                ibd_continue=0

                if [[ -f "${ibd_dir}/failed.txt" ]]
                then
                    if grep -q "${ibd_md5}" "${ibd_dir}/failed.txt"
                    then
                        ibd_continue=1

                        rm -f "${ibd_dir}/${ibd_md5}."*
                        sed -e "s/${ibd_md5}//" -e '/^$/d' -i "${ibd_dir}/failed.txt"
                        ibd_removed=$((ibd_removed + 1))
                    fi
                fi
            elif [[ -n "${ibd_full_repair}" ]]
            then
                if [[ "$(md5sum "${ibd_dir}/${ibd_md5}."* | cut -d ' ' -f 1)" == "${ibd_md5}" ]]
                then
                    ibd_continue=0
                else
                    rm -f "${ibd_dir}}/${ibd_md5}."*

                    if [[ -f "${ibd_dir}/failed.txt" ]]
                    then
                        sed -e "s/${ibd_md5}//" -e '/^$/d' -i "${ibd_dir}/failed.txt"
                    fi

                    ibd_removed=$((ibd_removed + 1))
                fi
            elif [[ -n "${ibd_encount}" ]]
            then
                ibd_absolute_break=0
                break
            else
                ibd_continue=0
            fi
        fi

        if [[ -n "${ibd_exclude_loop}" ]]
        then
            for ibd_exclude_dir in ${ibd_exclude_loop}
            do
                if ls "${ibd_exclude_dir}/${ibd_md5}."* &> /dev/null
                then
                    if [[ -n "${ibd_reversive}" ]]
                    then
                        rm -f "${ibd_exclude_dir}/${ibd_md5}."*

                        if [[ -f "${ibd_exclude_dir}/failed.txt" ]]
                        then
                            sed -e "s/${ibd_md5}//" -e '/^$/d' -i "${ibd_exclude_dir}/failed.txt"
                        fi

                        ibd_removed=$((ibd_removed + 1))
                    elif [[ -n "${ibd_xdownload}" ]] || [[ -n "${ibd_xremove}" ]]
                    then
                        ibd_continue=0

                        if [[ -n "${ibd_full_repair}" ]]
                        then
                            if ! [[ "$(md5sum "${ibd_exclude_dir}/${ibd_md5}."* | cut -d ' ' -f 1)" == "${ibd_md5}" ]]
                            then
                                ibd_continue=1

                                if [[ -n "${ibd_xremove}" ]]
                                then
                                    rm -f "${ibd_exclude_dir}/${ibd_md5}."*

                                    if [[ -f "${ibd_exclude_dir}/failed.txt" ]]
                                    then
                                        sed -e "s/${ibd_md5}//" -e '/^$/d' -i "${ibd_exclude_dir}/failed.txt"
                                    fi

                                    ibd_removed=$((ibd_removed + 1))
                                fi
                            fi
                        else
                            if [[ -f "${ibd_exclude_dir}/failed.txt" ]]
                            then
                                if grep -q "${ibd_md5}" "${ibd_exclude_dir}/failed.txt"
                                then
                                    ibd_continue=1

                                    if [[ -n "${ibd_xremove}" ]]
                                    then
                                        rm -f "${ibd_exclude_dir}/${ibd_md5}."*
                                        sed -e "s/${ibd_md5}//" -e '/^$/d' -i "${ibd_exclude_dir}/failed.txt"
                                        ibd_removed=$((ibd_removed + 1))
                                    fi
                                fi
                            fi
                        fi
                    elif [[ -n "${ibd_xselfremove}" ]]
                    then
                        ibd_continue=0

                        if ls "${ibd_dir}/${ibd_md5}."* &> /dev/null
                        then
                            rm -f "${ibd_dir}/${ibd_md5}."*

                            if [[ -f "${ibd_dir}/failed.txt" ]]
                            then
                                sed -e "s/${ibd_md5}//" -e '/^$/d' -i "${ibd_dir}/failed.txt"
                            fi

                            ibd_removed=$((ibd_removed + 1))
                        fi
                    else
                        ibd_continue=0
                        break
                    fi
                fi
            done
        fi

        if [[ ${ibd_continue} -eq 1 ]]
        then
            curl --connect-timeout ${ibd_download_timeout} \
            --output "${ibd_dir}/${ibd_filename}" \
            --remote-time \
            --proxy "${ibd_proxy}" \
            --retry-connrefused \
            --show-error \
            --silent \
            --user-agent "IBD" \
            "${ibd_url}"

            if ls "${ibd_dir}/${ibd_md5}."* &> /dev/null
            then
                if [[ -n "${ibd_skip_md5}" ]]
                then
                    ibd_success=$((ibd_success + 1))
                else
                    if [[ "$(md5sum "${ibd_dir}/${ibd_md5}."* | cut -d ' ' -f 1)" == "${ibd_md5}" ]]
                    then
                        ibd_success=$((ibd_success + 1))
                    else
                        ibd_failed=$((ibd_failed + 1))
                        fawrite "${ibd_md5}" "${ibd_dir}/failed.txt" "errors"

                        if [[ -z "${ibd_keep_md5}" ]]
                        then
                            rm -f "${ibd_dir}/${ibd_md5}."*
                            ibd_removed=$((ibd_removed + 1))
                        fi
                    fi
                fi
            else
                ibd_failed=$((ibd_failed + 1))
                fawrite "${ibd_md5}" "${ibd_dir}/failed.txt" "errors"
            fi
        fi

        ibd_done=$((ibd_done + 1))

        if [[ -z "${ibd_quiet}" ]]
        then
            echo -e "\r${ibd_filename}${ibd_erase}"
        fi

        echo -e -n "\r[Removed: ${ibd_removed}] [Success: ${ibd_success}] [Failed: ${ibd_failed}] [Done: ${ibd_done}] "
    done

    ibd_page=$((ibd_page + 1))
    sleep ${ibd_sleep_time}
done

echo ''

if ! [[ -s "${ibd_dir}/failed.txt" ]]
then
    rm -f "${ibd_dir}/failed.txt"
fi

if [[ -n "${ibd_exclude_loop}" ]]
then
    for ibd_exclude_dir in ${ibd_exclude_loop}
    do
        if ! [[ -s "${ibd_exclude_loop}/failed.txt" ]]
        then
            rm -f "${ibd_exclude_loop}/failed.txt"
        fi
    done
fi
