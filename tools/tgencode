#!/usr/bin/env dash
#
# Copyright (C) 2024-2025 Maria Lisina
# SPDX-License-Identifier: Apache-2.0
#
# Telegram Media Reencoder

set -e

tgencode_version="2.1"

if [ -n "${1}" ]
then
    while getopts hl:r:f:ap:c:mb tgencode_options
    do
        case "${tgencode_options}" in
            (h)
                tgencode_help=0
            ;;
            (l)
                tgencode_loglevel=${OPTARG}
            ;;
            (r)
                tgencode_fps=${OPTARG}
            ;;
            (f)
                tgencode_filters="${OPTARG}"
            ;;
            (a)
                tgencode_noaudio=0
            ;;
            (p)
                tgencode_preset=${OPTARG}
            ;;
            (c)
                tgencode_crf=${OPTARG}
            ;;
            (m)
                tgencode_multiple=0
            ;;
            (b)
                tgencode_break=0
            ;;
            (*)
                echo "See '${0} -h'"
                exit 1
            ;;
        esac
    done

    shift $((OPTIND - 1))
else
    tgencode_help=0
fi

if [ -n "${tgencode_help}" ]
then
    echo "Telegram Media Reencoder v${tgencode_version}" \
        "\n\nUsage: ${0} [options] [file]" \
        "\n\nOptions:" \
        "\n  -h\t\tShow help information" \
        "\n  -l <lvl>\tLog level, default: info" \
        "\n  -r <num>\tSet custom frame rate" \
        "\n  -f <str>\tSet custom filters" \
        "\n  -a\t\tRemove audio stream" \
        "\n  -p <pst>\tPreset, default: medium" \
        "\n  -c <num>\tConstant Rate Factor, default: 23" \
        "\n  -m\t\tAllow multiple files" \
        "\n  -b\t\tDo not exit on error"
    exit 0
fi

for tgencode_required in ffmpeg
do
    if ! command -v ${tgencode_required} > /dev/null
    then
        tgencode_missing="${tgencode_missing} ${tgencode_required}"
    fi
done

if [ -n "${tgencode_missing}" ]
then
    echo "Missing dependencies:${tgencode_missing}" \
        "\nFor more information follow: https://command-not-found.com/"
    exit 1
fi

if [ -z "${tgencode_loglevel}" ]
then
    tgencode_loglevel=info
fi

if [ -z "${tgencode_fps}" ]
then
    tgencode_fps=source_fps
fi

if [ -z "${tgencode_filters}" ]
then
    tgencode_filters="pad=ceil(iw/2)*2:ceil(ih/2)*2"
fi

if [ -n "${tgencode_noaudio}" ]
then
    tgencode_acodec="-an"
else
    tgencode_acodec="-acodec aac"
fi

if [ -z "${tgencode_preset}" ]
then
    tgencode_preset=medium
fi

if [ -z "${tgencode_crf}" ]
then
    tgencode_crf=23
fi

if [ -z "${1}" ]
then
    echo "No input file specified. See '${0} -h'"
    exit 1
fi

tgencode_exit=0

for tgencode_input in ${@}
do
    if [ -z "${tgencode_multiple}" ]
    then
        tgencode_input="${@}"
        unset tgencode_break
    fi

    if ! [ -f "${tgencode_input}" ]
    then
        tgencode_exit=1
        echo "No file found: ${tgencode_input}"

        if [ -z "${tgencode_break}" ]
        then
            exit ${tgencode_exit}
        fi

        continue
    fi

    tgencode_output="${tgencode_input%\.*}_t.mp4"
    echo "Reencoding: ${tgencode_input}"

    if ffmpeg -i "${tgencode_input}" \
        -loglevel ${tgencode_loglevel} \
        -profile:v high \
        -vcodec libx264 \
        -vf "fps=${tgencode_fps},${tgencode_filters}" \
        -pix_fmt yuv420p \
        ${tgencode_acodec} \
        -preset ${tgencode_preset} \
        -level 4.1 \
        -crf ${tgencode_crf} \
        -movflags +faststart \
        "${tgencode_output}" -y
    then
        echo "Succesfully reencoded: ${tgencode_output}"
    else
        tgencode_exit=1
        echo "Failed to reencode: ${tgencode_input}"

        if [ -z "${tgencode_break}" ]
        then
            exit ${tgencode_exit}
        fi
    fi

    if [ -z "${tgencode_multiple}" ]
    then
        break
    fi
done

exit ${tgencode_exit}
