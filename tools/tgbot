#!/usr/bin/env dash
#
# Copyright (C) 2024-2025 Maria Lisina
# SPDX-License-Identifier: Apache-2.0
#
# Telegram Bot JSON Sender

set -e
umask 77

tgbot_version="1.5"
tgbot_config="${HOME}/.config/tgbot"
tgbot_dfile="${tgbot_config}/config"
tgbot_daddress="https://api.telegram.org"
tgbot_djson="${tgbot_config}/json"

if [ -n "${1}" ]
then
    while getopts hc:a:t:j: tgbot_options
    do
        case "${tgbot_options}" in
            (h)
                tgbot_help=0
            ;;
            (c)
                tgbot_file="${OPTARG}"
            ;;
            (a)
                tgbot_address="${OPTARG}"
            ;;
            (t)
                tgbot_token="${OPTARG}"
            ;;
            (j)
                tgbot_json="${OPTARG}"
            ;;
            (*)
                echo "See '${0} -h'"
                exit 1
            ;;
        esac
    done

    shift $((OPTIND - 1))
else
    tgbot_help=0
fi

if [ -n "${tgbot_help}" ]
then
    echo "Telegram Bot JSON Sender v${tgbot_version}" \
        "\n\nUsage: ${0} [options] [post method] [json name]" \
        "\n\nOptions:" \
        "\n  -h\t\tShow help information" \
        "\n  -c <file>\tSpecify configuration file" \
        "\n  -a <addr>\tSpecify API address" \
        "\n  -t <token>\tSpecify access token" \
        "\n  -j <dir>\tSpecify json directory"
    exit 0
fi

for tgbot_required in curl mkdir
do
    if ! command -v ${tgbot_required} > /dev/null
    then
        tgbot_missing="${tgbot_missing} ${tgbot_required}"
    fi
done

if [ -n "${tgbot_missing}" ]
then
    echo "Missing dependencies:${tgbot_missing}" \
        "\nFor more information follow: https://command-not-found.com/"
    exit 1
fi

mkdir -p "${tgbot_config}"
mkdir -p "${tgbot_djson}"

if [ -z "${tgbot_file}" ]
then
    tgbot_file="${tgbot_dfile}"

    if ! [ -f "${tgbot_file}" ]
    then
        printf '%s="%s"\n%s="%s"\n%s="%s"' \
            "address" "${tgbot_daddress}" \
            "token" "" \
            "json" "${tgbot_djson}" > "${tgbot_file}"
        echo "Empty configuration file has been written to '${tgbot_file}'"
        exit 0
    fi
fi

if [ -f "${tgbot_file}" ]
then
    . "${tgbot_file}"
else
    echo "No configuration file found: '${tgbot_file}'"
    exit 1
fi

if [ -n "${tgbot_address}" ]
then
    address="${tgbot_address}"
fi

if [ -n "${tgbot_token}" ]
then
    token="${tgbot_token}"
fi

if [ -n "${tgbot_json}" ]
then
    json="${tgbot_json}"
fi

if [ -z "${address}" ]
then
    address="${tgbot_daddress}"
fi

if [ -z "${token}" ]
then
    echo "No access token specified. See '${tgbot_file}'"
    exit 1
fi

if [ -z "${json}" ]
then
    json="${tgbot_djson}"
fi

if ! [ -d "${json}" ]
then
    echo "No json directory found: '${json}'"
    exit 1
fi

if [ -n "${1}" ]
then
    tgbot_method="${1}"
    shift
else
    echo "No post method specified. See '${0} -h'"
    exit 1
fi

if [ -n "${1}" ]
then
    tgbot_name="${1}.json"
    shift
else
    echo "No json name specified. See '${0} -h'"
    exit 1
fi

if [ -n "${1}" ]
then
    echo "Unrecognized action ${1}. See '${0} -h'"
    exit 1
fi

if ! [ -f "${json}/${tgbot_name}" ]
then
    echo "No json file found: '${tgbot_name}'. See '${json}'"
    exit 1
fi

curl --data "@${json}/${tgbot_name}" \
    --header "Content-Type: application/json" \
    --request POST \
    --show-error \
    --silent \
    "${address}/bot${token}/${tgbot_method}"
